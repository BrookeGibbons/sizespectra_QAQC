library(magrittr)
expeds <- read_exped()
fl <- read_fl_benthic()
maxn <- read_maxn_benthic()
meta <- read_meta_benthic()
### clean data
#clean meta
meta <- clean_meta_benthic(meta)
#get duplicated opcodes in meta
meta[duplicated(meta$NewOpCode),]
#load all functions
devtools::load_all()
#load all functions
devtools::load_all()
meta <- read_meta_benthic()
#clean meta
meta <- clean_meta_benthic(meta)
#get duplicated opcodes in meta
meta[duplicated(meta$NewOpCode),]
View(meta)
#update NAMESPACE and add .Rd file for each function in man folder
devtools::document()
#load all functions
devtools::load_all()
########################################################################################################################################
########### benthic bruvs
### read benthic bruvs data
expeds <- read_exped()
fl <- read_fl_benthic()
maxn <- read_maxn_benthic()
meta <- read_meta_benthic()
### clean data
#clean meta
meta <- clean_meta_benthic(meta)
#get duplicated opcodes in meta
meta[duplicated(meta$NewOpCode),]
#clean fl
fl <- clean_fl_benthic(fl)
#clean maxn
maxn <- clean_maxn_benthic(maxn)
View(maxn)
maxn <- read_maxn_benthic()
#clean maxn
maxn <- clean_maxn_benthic(maxn)
#update NAMESPACE and add .Rd file for each function in man folder
devtools::document()
#load all functions
devtools::load_all()
########################################################################################################################################
########### benthic bruvs
### read benthic bruvs data
expeds <- read_exped()
fl <- read_fl_benthic()
maxn <- read_maxn_benthic()
meta <- read_meta_benthic()
### clean data
#clean meta
meta <- clean_meta_benthic(meta)
#get duplicated opcodes in meta
meta[duplicated(meta$NewOpCode),]
#clean fl
fl <- clean_fl_benthic(fl)
#clean maxn
maxn <- clean_maxn_benthic(maxn)
### remove expeditions that are not permitted to be used in this study
#select expeds based on permission
expeds_notpermitted <- expeds$`New Exped`[expeds$Permission == "No"]
#maxn
maxn <- removed_notpermitted_expeditions_benthic(maxn, expeds_notpermitted)
#fl
View(fl)
#fl
fl <- removed_notpermitted_expeditions_benthic(fl, expeds_notpermitted)
#meta
meta <- removed_notpermitted_expeditions_benthic(meta, expeds_notpermitted)
### select fish families
fish_families <- c("Glaucosomatidae", "Labridae", "Lethrinidae", "Pomacanthidae", "Scaridae", "Serranidae", "Sparidae", "Carangidae",
"Chaetodontidae", "Haemulidae", "Kyphosidae", "Mullidae", "Pomacentridae", "Dasyatidae", "Acanthuridae", "Muraenidae",
"Siganidae","Pseudochromidae", "Monacanthidae", "Tetraodontidae","Heterodontidae", "Lutjanidae", "Aulopidae", "Orectolobidae", "Clupeidae",
"Nemipteridae",  "Enoplosidae", "Myliobatidae",  "Scorpaenidae", "Scorpididae",   "Rhinidae", "Carcharhinidae","Sphyrnidae",
"Arripidae","Caesionidae",  "Scombridae",    "Gobiidae", "Pinguipedidae", "Cheilodactylidae", "Aracanidae",    "Microcanthidae",
"Platycephalidae", "Rhinobatidae", "Urolophidae",   "Ephippidae",   "Synodontidae",  "Blenniidae",   "Caesioscorpididae", "Apogonidae",   "Plesiopidae",
"Echeneidae",   "Cirrhitidae",   "Girellidae",   "Neosebastidae", "Scyliorhinidae", "Lamnidae", "Hemigaleidae",  "Sillaginidae",  "Grammistidae",
"Sphyraenidae",  "Pempheridae",  "Gerreidae","Alopiidae",  "Odacidae", "Sebastidae",   "Pleuronectidae", "Parascylliidae", "Rachycentridae","Zanclidae",
"Antennariidae", "Veliferidae",  "Triakidae","Terapontidae", "Berycidae","Dinolestidae", "Diodontidae",   "Oplegnathidae", "Pristiophoridae",
"Chironemidae",  "Gempylidae",    "Mobulidae",    "Balistidae",    "Cheloniidae",  "Holocentridae",  "Aulostomidae",  "Ginglymostomatidae",
"Ostraciidae",   "Malacanthidae", "Clinidae", "Microdesmidae", "Stegostomatidae", "Fistulariidae", "Belonidae",  "Albulidae","Priacanthidae",
"Hemiscylliidae","Tripterygiidae", "Odontaspididae","Plotosidae",   "Elopidae", "Paralichthyidae", "Bothidae", "Ariidae", "Latidae",  "Oneirodidae",
"Syngnathidae",  "Callionymidae", "Opistognathidae", "Centriscidae", "Trichonotidae", "Pristidae",   "Congridae","Chanidae", "Samaridae",
"Aplodactylidae", "Zeidae",   "Melanostomiidae", "Monodactylidae","Leiognathidae", "Atherinidae",   "Hemiramphidae", "Pentacerotidae",
"Triglidae", "Rhinopteridae", "Istiophoridae", "Soleidae", "Pimelodidae",  "Chirocentridae","Chimaeridae",  "Chlorophthalmidae",
"Squalidae",    "Polymixiidae",  "Centrophoridae", "Macrouridae",   "Centrolophidae", "Polyprionidae", "Zeniontidae", "Hexanchidae",
"Euclichthyidae",  "Torpedinidae",  "Macroramphosidae", "Rajidae",  "Trichiuridae", "Myxinidae","Trachichthyidae", "Etmopteridae",  "Ophidiidae",
"Moridae",  "Molidae",  "Acropomatidae", "Myctophidae",  "Tetrarogidae",  "Salangidae",   "Scatophagidae", "Acanthoclinidae" , "Ophichthidae",
"Gobiesocidae", "Carapidae","Peristediidae", "labridae", "carangidae",  "balistidae",    "cirrhitidae",   "Polynemidae",   "Mugilidae",
"Eleotridae",    "Tetrabrachiidae" , "caesionidae",   "serranidae",   "Trygonorrhinidae", "Sciaenidae",   "Pomatomidae",   "Stomiidae",
"Rhombosoleidae","Monocentridae", "Rhyncobatus",  "Glaucostegidae", "ACANTHURIDAE",  "BALISTIDAE", "BLENNIDEA","LABRIDAE", "MULLIDAE",
"PINGUIPEDIDAE", "POMACENTRIDAE", "SERRANIDAE",   "CARANGIDAE",    "CHAETODONTIDAE", "LETHRINIDAE",   "MOBULIDAE", "NEMIPTERIDAE",
"POMACANTHIDAE", "SCARIDAE", "SIGANIDAE",  "TETRAODONTIDAE","CIRRHITIDAE",  "DASYATIDAE",    "HOLOCENTRIDAE", "LUTJANIDAE",  "ANTHIINAE",
"CAESIONIDAE",   "GOBIIDAE", "PSEUDOCHROMIDAE", "MURAENIDAE", "HAEMULIDAE",  "EPHIPPIDAE", "MICRODESMIDAE", "SPHYRAENIDAE", "MONACANTHIDAE",
"MALACANTHIDAE", "DIODONTIDAE",   "ECHENEIDIDAE", "SPARIDAE", "OSTRACIIDAE",   "KYPHOSIDAE",    "SYNODONTIDAE",  "BLENNIDAE",
"CHARCHARHINIDAE", "PEMPHERIDAE",  "APLOACTINIDAE", "CONGRIDAE", "PRIACANTHIDAE", "HEMIRAMPHIDAE", "SCORPAENIDAE",  "APOGONIDAE",
"FISTULARIIDAE", "TORPEDINIDAE",  "Gadidae", "Lotidae", "Cottidae",   "Trachinidae",  "Anarhichadidae")
#maxn
maxn = select_fish_families_benthic(maxn, fish_families)
#fl
fl = select_fish_families_benthic(fl, fish_families)
### keep only opcodes that are available in meta in fl and maxn
# fl
fl <- keep_opcode_in_meta(meta, fl)
# maxn
maxn <- keep_opcode_in_meta(meta, maxn)
### remove from fl the opcodes not available in maxn, ie the single opcodes
#fl
fl <- remove_single_opcodes(fl, maxn)
#number of opcodes
length(unique(fl$NewOpCode))
length(unique(maxn$NewOpCode))
### assign empty opcodes in meta
meta <- assign_empty_opcodes_meta_benthic(meta, maxn)
unique(maxn$NewOpCode)
#update NAMESPACE and add .Rd file for each function in man folder
devtools::document()
#load all functions
devtools::load_all()
########################################################################################################################################
########### benthic bruvs
### read benthic bruvs data
expeds <- read_exped()
fl <- read_fl_benthic()
maxn <- read_maxn_benthic()
meta <- read_meta_benthic()
### clean data
#clean meta
meta <- clean_meta_benthic(meta)
#clean fl
fl <- clean_fl_benthic(fl)
#clean maxn
maxn <- clean_maxn_benthic(maxn)
### remove expeditions that are not permitted to be used in this study
#select expeds based on permission
expeds_notpermitted <- expeds$`New Exped`[expeds$Permission == "No"]
#maxn
maxn <- removed_notpermitted_expeditions_benthic(maxn, expeds_notpermitted)
#fl
fl <- removed_notpermitted_expeditions_benthic(fl, expeds_notpermitted)
#meta
meta <- removed_notpermitted_expeditions_benthic(meta, expeds_notpermitted)
### select fish families
fish_families <- c("Glaucosomatidae", "Labridae", "Lethrinidae", "Pomacanthidae", "Scaridae", "Serranidae", "Sparidae", "Carangidae",
"Chaetodontidae", "Haemulidae", "Kyphosidae", "Mullidae", "Pomacentridae", "Dasyatidae", "Acanthuridae", "Muraenidae",
"Siganidae","Pseudochromidae", "Monacanthidae", "Tetraodontidae","Heterodontidae", "Lutjanidae", "Aulopidae", "Orectolobidae", "Clupeidae",
"Nemipteridae",  "Enoplosidae", "Myliobatidae",  "Scorpaenidae", "Scorpididae",   "Rhinidae", "Carcharhinidae","Sphyrnidae",
"Arripidae","Caesionidae",  "Scombridae",    "Gobiidae", "Pinguipedidae", "Cheilodactylidae", "Aracanidae",    "Microcanthidae",
"Platycephalidae", "Rhinobatidae", "Urolophidae",   "Ephippidae",   "Synodontidae",  "Blenniidae",   "Caesioscorpididae", "Apogonidae",   "Plesiopidae",
"Echeneidae",   "Cirrhitidae",   "Girellidae",   "Neosebastidae", "Scyliorhinidae", "Lamnidae", "Hemigaleidae",  "Sillaginidae",  "Grammistidae",
"Sphyraenidae",  "Pempheridae",  "Gerreidae","Alopiidae",  "Odacidae", "Sebastidae",   "Pleuronectidae", "Parascylliidae", "Rachycentridae","Zanclidae",
"Antennariidae", "Veliferidae",  "Triakidae","Terapontidae", "Berycidae","Dinolestidae", "Diodontidae",   "Oplegnathidae", "Pristiophoridae",
"Chironemidae",  "Gempylidae",    "Mobulidae",    "Balistidae",    "Cheloniidae",  "Holocentridae",  "Aulostomidae",  "Ginglymostomatidae",
"Ostraciidae",   "Malacanthidae", "Clinidae", "Microdesmidae", "Stegostomatidae", "Fistulariidae", "Belonidae",  "Albulidae","Priacanthidae",
"Hemiscylliidae","Tripterygiidae", "Odontaspididae","Plotosidae",   "Elopidae", "Paralichthyidae", "Bothidae", "Ariidae", "Latidae",  "Oneirodidae",
"Syngnathidae",  "Callionymidae", "Opistognathidae", "Centriscidae", "Trichonotidae", "Pristidae",   "Congridae","Chanidae", "Samaridae",
"Aplodactylidae", "Zeidae",   "Melanostomiidae", "Monodactylidae","Leiognathidae", "Atherinidae",   "Hemiramphidae", "Pentacerotidae",
"Triglidae", "Rhinopteridae", "Istiophoridae", "Soleidae", "Pimelodidae",  "Chirocentridae","Chimaeridae",  "Chlorophthalmidae",
"Squalidae",    "Polymixiidae",  "Centrophoridae", "Macrouridae",   "Centrolophidae", "Polyprionidae", "Zeniontidae", "Hexanchidae",
"Euclichthyidae",  "Torpedinidae",  "Macroramphosidae", "Rajidae",  "Trichiuridae", "Myxinidae","Trachichthyidae", "Etmopteridae",  "Ophidiidae",
"Moridae",  "Molidae",  "Acropomatidae", "Myctophidae",  "Tetrarogidae",  "Salangidae",   "Scatophagidae", "Acanthoclinidae" , "Ophichthidae",
"Gobiesocidae", "Carapidae","Peristediidae", "labridae", "carangidae",  "balistidae",    "cirrhitidae",   "Polynemidae",   "Mugilidae",
"Eleotridae",    "Tetrabrachiidae" , "caesionidae",   "serranidae",   "Trygonorrhinidae", "Sciaenidae",   "Pomatomidae",   "Stomiidae",
"Rhombosoleidae","Monocentridae", "Rhyncobatus",  "Glaucostegidae", "ACANTHURIDAE",  "BALISTIDAE", "BLENNIDEA","LABRIDAE", "MULLIDAE",
"PINGUIPEDIDAE", "POMACENTRIDAE", "SERRANIDAE",   "CARANGIDAE",    "CHAETODONTIDAE", "LETHRINIDAE",   "MOBULIDAE", "NEMIPTERIDAE",
"POMACANTHIDAE", "SCARIDAE", "SIGANIDAE",  "TETRAODONTIDAE","CIRRHITIDAE",  "DASYATIDAE",    "HOLOCENTRIDAE", "LUTJANIDAE",  "ANTHIINAE",
"CAESIONIDAE",   "GOBIIDAE", "PSEUDOCHROMIDAE", "MURAENIDAE", "HAEMULIDAE",  "EPHIPPIDAE", "MICRODESMIDAE", "SPHYRAENIDAE", "MONACANTHIDAE",
"MALACANTHIDAE", "DIODONTIDAE",   "ECHENEIDIDAE", "SPARIDAE", "OSTRACIIDAE",   "KYPHOSIDAE",    "SYNODONTIDAE",  "BLENNIDAE",
"CHARCHARHINIDAE", "PEMPHERIDAE",  "APLOACTINIDAE", "CONGRIDAE", "PRIACANTHIDAE", "HEMIRAMPHIDAE", "SCORPAENIDAE",  "APOGONIDAE",
"FISTULARIIDAE", "TORPEDINIDAE",  "Gadidae", "Lotidae", "Cottidae",   "Trachinidae",  "Anarhichadidae")
#maxn
maxn = select_fish_families_benthic(maxn, fish_families)
#fl
fl = select_fish_families_benthic(fl, fish_families)
### keep only opcodes that are available in meta in fl and maxn
# fl
fl <- keep_opcode_in_meta(meta, fl)
meta_dat=meta_dat
meta_dat=meta
dat=maxn
# get opcodes available in meta
opcode_meta <- unique(meta_dat$NewOpCode)
# get opcodes available in dat
opcode_dat <- unique(dat$NewOpCode)
cat("nb of differing opcodes:", length(opcode_meta) - length(opcode_dat))
diff(opcode_meta, opcode_dat)
setdiff(opcode_meta, opcode_dat)
setdiff(opcode_dat, opcode_meta)
meta <- read_meta_benthic()
#load all functions
devtools::load_all()
#to use pipe operator
library(magrittr)
########################################################################################################################################
########### benthic bruvs
### read benthic bruvs data
expeds <- read_exped()
fl <- read_fl_benthic()
maxn <- read_maxn_benthic()
meta <- read_meta_benthic()
### clean data
#clean meta
meta <- clean_meta_benthic(meta)
#clean fl
fl <- clean_fl_benthic(fl)
#clean maxn
maxn <- clean_maxn_benthic(maxn)
### remove expeditions that are not permitted to be used in this study
#select expeds based on permission
expeds_notpermitted <- expeds$`New Exped`[expeds$Permission == "No"]
#maxn
maxn <- removed_notpermitted_expeditions_benthic(maxn, expeds_notpermitted)
#fl
fl <- removed_notpermitted_expeditions_benthic(fl, expeds_notpermitted)
#meta
meta <- removed_notpermitted_expeditions_benthic(meta, expeds_notpermitted)
### select fish families
fish_families <- c("Glaucosomatidae", "Labridae", "Lethrinidae", "Pomacanthidae", "Scaridae", "Serranidae", "Sparidae", "Carangidae",
"Chaetodontidae", "Haemulidae", "Kyphosidae", "Mullidae", "Pomacentridae", "Dasyatidae", "Acanthuridae", "Muraenidae",
"Siganidae","Pseudochromidae", "Monacanthidae", "Tetraodontidae","Heterodontidae", "Lutjanidae", "Aulopidae", "Orectolobidae", "Clupeidae",
"Nemipteridae",  "Enoplosidae", "Myliobatidae",  "Scorpaenidae", "Scorpididae",   "Rhinidae", "Carcharhinidae","Sphyrnidae",
"Arripidae","Caesionidae",  "Scombridae",    "Gobiidae", "Pinguipedidae", "Cheilodactylidae", "Aracanidae",    "Microcanthidae",
"Platycephalidae", "Rhinobatidae", "Urolophidae",   "Ephippidae",   "Synodontidae",  "Blenniidae",   "Caesioscorpididae", "Apogonidae",   "Plesiopidae",
"Echeneidae",   "Cirrhitidae",   "Girellidae",   "Neosebastidae", "Scyliorhinidae", "Lamnidae", "Hemigaleidae",  "Sillaginidae",  "Grammistidae",
"Sphyraenidae",  "Pempheridae",  "Gerreidae","Alopiidae",  "Odacidae", "Sebastidae",   "Pleuronectidae", "Parascylliidae", "Rachycentridae","Zanclidae",
"Antennariidae", "Veliferidae",  "Triakidae","Terapontidae", "Berycidae","Dinolestidae", "Diodontidae",   "Oplegnathidae", "Pristiophoridae",
"Chironemidae",  "Gempylidae",    "Mobulidae",    "Balistidae",    "Cheloniidae",  "Holocentridae",  "Aulostomidae",  "Ginglymostomatidae",
"Ostraciidae",   "Malacanthidae", "Clinidae", "Microdesmidae", "Stegostomatidae", "Fistulariidae", "Belonidae",  "Albulidae","Priacanthidae",
"Hemiscylliidae","Tripterygiidae", "Odontaspididae","Plotosidae",   "Elopidae", "Paralichthyidae", "Bothidae", "Ariidae", "Latidae",  "Oneirodidae",
"Syngnathidae",  "Callionymidae", "Opistognathidae", "Centriscidae", "Trichonotidae", "Pristidae",   "Congridae","Chanidae", "Samaridae",
"Aplodactylidae", "Zeidae",   "Melanostomiidae", "Monodactylidae","Leiognathidae", "Atherinidae",   "Hemiramphidae", "Pentacerotidae",
"Triglidae", "Rhinopteridae", "Istiophoridae", "Soleidae", "Pimelodidae",  "Chirocentridae","Chimaeridae",  "Chlorophthalmidae",
"Squalidae",    "Polymixiidae",  "Centrophoridae", "Macrouridae",   "Centrolophidae", "Polyprionidae", "Zeniontidae", "Hexanchidae",
"Euclichthyidae",  "Torpedinidae",  "Macroramphosidae", "Rajidae",  "Trichiuridae", "Myxinidae","Trachichthyidae", "Etmopteridae",  "Ophidiidae",
"Moridae",  "Molidae",  "Acropomatidae", "Myctophidae",  "Tetrarogidae",  "Salangidae",   "Scatophagidae", "Acanthoclinidae" , "Ophichthidae",
"Gobiesocidae", "Carapidae","Peristediidae", "labridae", "carangidae",  "balistidae",    "cirrhitidae",   "Polynemidae",   "Mugilidae",
"Eleotridae",    "Tetrabrachiidae" , "caesionidae",   "serranidae",   "Trygonorrhinidae", "Sciaenidae",   "Pomatomidae",   "Stomiidae",
"Rhombosoleidae","Monocentridae", "Rhyncobatus",  "Glaucostegidae", "ACANTHURIDAE",  "BALISTIDAE", "BLENNIDEA","LABRIDAE", "MULLIDAE",
"PINGUIPEDIDAE", "POMACENTRIDAE", "SERRANIDAE",   "CARANGIDAE",    "CHAETODONTIDAE", "LETHRINIDAE",   "MOBULIDAE", "NEMIPTERIDAE",
"POMACANTHIDAE", "SCARIDAE", "SIGANIDAE",  "TETRAODONTIDAE","CIRRHITIDAE",  "DASYATIDAE",    "HOLOCENTRIDAE", "LUTJANIDAE",  "ANTHIINAE",
"CAESIONIDAE",   "GOBIIDAE", "PSEUDOCHROMIDAE", "MURAENIDAE", "HAEMULIDAE",  "EPHIPPIDAE", "MICRODESMIDAE", "SPHYRAENIDAE", "MONACANTHIDAE",
"MALACANTHIDAE", "DIODONTIDAE",   "ECHENEIDIDAE", "SPARIDAE", "OSTRACIIDAE",   "KYPHOSIDAE",    "SYNODONTIDAE",  "BLENNIDAE",
"CHARCHARHINIDAE", "PEMPHERIDAE",  "APLOACTINIDAE", "CONGRIDAE", "PRIACANTHIDAE", "HEMIRAMPHIDAE", "SCORPAENIDAE",  "APOGONIDAE",
"FISTULARIIDAE", "TORPEDINIDAE",  "Gadidae", "Lotidae", "Cottidae",   "Trachinidae",  "Anarhichadidae")
#maxn
maxn = select_fish_families_benthic(maxn, fish_families)
#fl
fl = select_fish_families_benthic(fl, fish_families)
### keep only opcodes that are available in meta in fl and maxn
# fl
fl <- keep_opcode_in_meta(meta, fl)
# maxn
maxn <- keep_opcode_in_meta(meta, maxn)
### remove from fl the opcodes not available in maxn, ie the single opcodes
#fl
fl <- remove_single_opcodes(fl, maxn)
#number of opcodes
length(unique(fl$NewOpCode))
length(unique(maxn$NewOpCode))
### assign empty opcodes in meta
meta <- assign_empty_opcodes_meta_benthic(meta, maxn)
### write meta opcodes for benthic bruvs
write_meta_opcodes_benthic(meta)
### Add mean fork length data to maxn data based on a hierarchy for benthic bruvs
maxn <- add_mean_fl_to_maxn_data_benthic(fl, maxn)
### Add fork length data for individuals counted in maxn but with no available fork length
### for these individuals we assign the mean fork length calculated in maxn data
### for benthic bruvs
fl <- add_individual_fl_data_benthic(fl, maxn)
### Estimate weight from observed length for a taxa using rfishbase
fl <- estimate_weight_from_length(fl)
### rename objects before saving
maxn_benthic = maxn
fl_benthic = fl
meta_benthic = meta
### save objects
save(maxn_benthic, fl_benthic, meta_benthic, file = here::here("1_read_clean_benthic.RData"))
### Estimate weight from observed length for a taxa using rfishbase
fl <- estimate_weight_from_length(fl)
data=fl
if(!all(c("Binomial", "Lengthcm") %in% names(data))) {
print("Data must contain species name (Binomial) and observed length (Lengthcm)")
break
}
#all lengths are assumed to be fork length with unit in cm
if(!("length_type" %in% names(data))) {data$length_type = "FL"}
if(!("length_units" %in% names(data))) {data$length_units = "cm"}
# First we need to convert observed fork length (FL) to total length (TL) in centimeters if not already in those units
length_length_data = NA
if(any(data$length_type == "FL")) {
# Get the length to length conversions from Fishbase
tryCatch(length_length_data <- data.frame(rfishbase::length_length(unique(data$Binomial), fields = c("Species", "Length1","Length2","a","b"))),
error=function(e){})
names(length_length_data)[1] = "Binomial"
length_length_data = length_length_data[length_length_data$a == 0 & !is.na(length_length_data$Binomial),]
length_length_data = length_length_data[length_length_data$Length1 %in% c("TL", "FL") & length_length_data$Length2 %in% c("TL", "FL"),]
if(nrow(length_length_data) == 1 & is.na(length_length_data$a[1]))  {data$TL_FLmean_ratio = 1} else {
# print(length_length_data)
if(is.data.frame(length_length_data) & nrow(length_length_data > 0)) {
length_length_data$TL_FLratio = NA
# Find the TL:FL ratios (either direction)
length_length_data[length_length_data$Length1 == ("TL") & length_length_data$Length2 == ("FL"),]$TL_FLratio = length_length_data[length_length_data$Length1 == ("TL") & length_length_data$Length2 == ("FL"),]$b
length_length_data[length_length_data$Length1 == ("FL") & length_length_data$Length2 == ("TL"),]$TL_FLratio = 1/(length_length_data[length_length_data$Length1 == ("FL") & length_length_data$Length2 == ("TL"),]$b)
#print(length_length_data)
# Calculate the mean TL:FL ratio
TL_FLmean_ratio = length_length_data %>%
dplyr::group_by(Binomial) %>%
dplyr::summarise(TL_FLmean_ratio = mean(TL_FLratio, na.rm = TRUE))
}
}
data = merge(data, TL_FLmean_ratio, by = "Binomial", all.x = TRUE)
data$TL_FLmean_ratio[is.na(data$TL_FLmean_ratio)] = 1
} else {data$TL_FLmean_ratio = 1}
# Apply this to the observed fork length
data$conv_length = data$Lengthcm * data$TL_FLmean_ratio
# Convert length from meters to centimeters if needed
data$conv_length[data$length_units == "m"] =  data$conv_length[data$length_units == "m"] * 100
# print(paste("TL(cm) =", conv_length))
# Get the a and b estimates for the length to weight equation W = a * L^b
tryCatch(a_b <- rfishbase::estimate(unique(data$Binomial), fields = c("Species", "a", "b")),
error=function(e) {})
names(a_b)[1] = "Binomial"
# print(paste("a =", a_b$a))
# print(paste("b =", a_b$b))
# fill values for missing species using values from genus and family
# calculate mean values per genus
a_b %>%
dplyr::mutate(Genus = stringr::word(Binomial, 1)) %>%
dplyr::group_by(Genus) %>%
dplyr::summarise(mean_a_genus = mean(a, na.rm = T),
mean_b_genus = mean(b, na.rm = T)) -> mean_data_genus
# calculate mean values per family
fl
### Estimate weight from observed length for a taxa using rfishbase
fl <- estimate_weight_from_length(fl)
### rename objects before saving
maxn_benthic = maxn
fl_benthic = fl
meta_benthic = meta
### save objects
save(maxn_benthic, fl_benthic, meta_benthic, file = here::here("1_read_clean_benthic.RData"))
11.4+1.9+1.9
11.9/1.9
11.4/9
11.4/1.9
15.2+29.9
#load all functions
devtools::load_all()
#to use pipe operator
library(magrittr)
### read pelagic bruvs data
meta <- read_meta_pelagic()
maxn <- read_maxn_pelagic()
fl <- read_fl_pelagic()
meta1 <- clean_meta_pelagic(meta)
View(meta1)
#load all functions
devtools::load_all()
#to use pipe operator
library(magrittr)
########################################################################################################################################
# read and clean bruvs data
########################################################################################################################################
########################################################################################################################################
########### pelagic bruvs
### read pelagic bruvs data
meta <- read_meta_pelagic()
maxn <- read_maxn_pelagic()
fl <- read_fl_pelagic()
### clean data
# clean maxn
maxn <- clean_maxn_pelagic(maxn)
# clean fl
fl <- clean_fl_pelagic(fl)
# clean meta
meta <- clean_meta_pelagic(meta)
#load all functions
devtools::load_all()
#to use pipe operator
library(magrittr)
########################################################################################################################################
# read and clean bruvs data
########################################################################################################################################
########################################################################################################################################
########### pelagic bruvs
### read pelagic bruvs data
meta <- read_meta_pelagic()
maxn <- read_maxn_pelagic()
fl <- read_fl_pelagic()
meta1 <- clean_meta_pelagic(meta)
#load all functions
devtools::load_all()
#to use pipe operator
library(magrittr)
########################################################################################################################################
# read and clean bruvs data
########################################################################################################################################
########################################################################################################################################
########### pelagic bruvs
### read pelagic bruvs data
meta <- read_meta_pelagic()
maxn <- read_maxn_pelagic()
fl <- read_fl_pelagic()
meta1 <- clean_meta_pelagic(meta)
table(meta$`USE?`)
table(meta1$use)
#load all functions
devtools::load_all()
#to use pipe operator
library(magrittr)
########################################################################################################################################
# read and clean bruvs data
########################################################################################################################################
########################################################################################################################################
########### pelagic bruvs
### read pelagic bruvs data
meta <- read_meta_pelagic()
maxn <- read_maxn_pelagic()
fl <- read_fl_pelagic()
meta1 <- clean_meta_pelagic(meta)
table(meta1$use)
table(meta$`USE?`)
### clean data
# clean maxn
maxn <- clean_maxn_pelagic(maxn)
# clean fl
fl <- clean_fl_pelagic(fl)
# clean meta
meta <- clean_meta_pelagic(meta)
### select fish families
fish_families <- c("Nomeidae", "Istiophoridae", "Fistulariidae", "Coryphaenidae", "Scombridae", "Carangidae", "Myliobatidae",
"Echeneidae", "Gerreidae", "Carcharhinidae", "Sphyrnidae", "Exocoetidae", "Monacanthidae", "Lamnidae",
"Balistidae", "Molidae", "Caproidae", "Centriscidae", "Centrolophidae", "Dasyatidae", "Clupeidae",
"Blenniidae", "Mullidae", "Priacanthidae", "Sphyraenidae", "Apogonidae", "Tetraodontidae",
"Pomacentridae", "Lutjanidae", "Labridae", "Syngnathidae", "Sparidae", "Kyphosidae", "Rachycentridae",
"Belonidae", "Acanthuridae", "Caesionidae", "Aulostomidae", "Platax", "Engraulidae", "Chanidae",
"Nematistiidae", "Lobotidae", "Macroramphosidae", "Ephippidae")
# fl
fl <- select_fish_families_pelagic(fl, fish_families)
# maxn
maxn <- select_fish_families_pelagic(maxn, fish_families)
### keep only opcodes that are available in meta in fl and maxn
# fl
fl <- keep_opcode_in_meta(meta, fl)
# maxn
maxn <- keep_opcode_in_meta(meta, maxn)
### remove from fl the opcodes not available in maxn, ie the single opcodes
#fl
fl <- remove_single_opcodes(fl, maxn)
#number of opcodes
length(unique(fl$NewOpCode))
length(unique(maxn$NewOpCode))
#number of strings
length(unique(fl$String))
length(unique(maxn$String))
### assign empty opcodes in meta
meta <- assign_empty_opcodes_meta_pelagic(meta, maxn)
### write meta opcodes for pelagic bruvs
write_meta_opcodes_pelagic(meta)
### write meta strings for pelagic bruvs
write_meta_strings_pelagic(meta)
#load all functions
devtools::load_all()
#to use pipe operator
library(magrittr)
########################################################################################################################################
# read and clean bruvs data
########################################################################################################################################
########################################################################################################################################
########### pelagic bruvs
### read pelagic bruvs data
meta <- read_meta_pelagic()
maxn <- read_maxn_pelagic()
fl <- read_fl_pelagic()
### clean data
# clean maxn
maxn <- clean_maxn_pelagic(maxn)
# clean fl
fl <- clean_fl_pelagic(fl)
# clean meta
meta <- clean_meta_pelagic(meta)
### select fish families
fish_families <- c("Nomeidae", "Istiophoridae", "Fistulariidae", "Coryphaenidae", "Scombridae", "Carangidae", "Myliobatidae",
"Echeneidae", "Gerreidae", "Carcharhinidae", "Sphyrnidae", "Exocoetidae", "Monacanthidae", "Lamnidae",
"Balistidae", "Molidae", "Caproidae", "Centriscidae", "Centrolophidae", "Dasyatidae", "Clupeidae",
"Blenniidae", "Mullidae", "Priacanthidae", "Sphyraenidae", "Apogonidae", "Tetraodontidae",
"Pomacentridae", "Lutjanidae", "Labridae", "Syngnathidae", "Sparidae", "Kyphosidae", "Rachycentridae",
"Belonidae", "Acanthuridae", "Caesionidae", "Aulostomidae", "Platax", "Engraulidae", "Chanidae",
"Nematistiidae", "Lobotidae", "Macroramphosidae", "Ephippidae")
# fl
fl <- select_fish_families_pelagic(fl, fish_families)
# maxn
maxn <- select_fish_families_pelagic(maxn, fish_families)
#load all functions
devtools::load_all()
#to use pipe operator
library(magrittr)
########################################################################################################################################
# read and clean bruvs data
########################################################################################################################################
########################################################################################################################################
########### pelagic bruvs
### read pelagic bruvs data
meta <- read_meta_pelagic()
maxn <- read_maxn_pelagic()
fl <- read_fl_pelagic()
