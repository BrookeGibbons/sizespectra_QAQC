#maxn
maxn = select_fish_families_benthic(maxn, fish_families)
#fl
fl = select_fish_families_benthic(fl, fish_families)
### keep only opcodes that are available in meta in fl and maxn
# fl
fl <- keep_opcode_in_meta(meta, fl)
# maxn
maxn <- keep_opcode_in_meta(meta, maxn)
### remove from fl the opcodes not available in maxn, ie the single opcodes
#fl
fl <- remove_single_opcodes(fl, maxn)
#number of opcodes
length(unique(fl$NewOpCode))
length(unique(maxn$NewOpCode))
### assign empty opcodes in meta
meta <- assign_empty_opcodes_meta_benthic(meta, maxn)
### Add mean fork length data to maxn data based on a hierarchy for benthic bruvs
maxn <- add_mean_fl_to_maxn_data_benthic(fl, maxn)
mean_fam_exped
fl
#load all functions
devtools::load_all()
########################################################################################################################################
########### benthic bruvs
### read benthic bruvs data
expeds <- read_exped()
fl <- read_fl_benthic()
maxn <- read_maxn_benthic()
meta <- read_meta_benthic()
### clean data
#clean meta
meta <- clean_meta_benthic(meta)
#clean fl
fl <- clean_fl_benthic(fl)
#clean maxn
maxn <- clean_maxn_benthic(maxn)
### remove expeditions that are not permitted to be used in this study
#select expeds based on permission
expeds_notpermitted <- expeds$`New Exped`[expeds$Permission == "No"]
#maxn
maxn <- removed_notpermitted_expeditions_benthic(maxn, expeds_notpermitted)
#fl
fl <- removed_notpermitted_expeditions_benthic(fl, expeds_notpermitted)
#meta
meta <- removed_notpermitted_expeditions_benthic(meta, expeds_notpermitted)
### select fish families
fish_families <- c("Glaucosomatidae", "Labridae", "Lethrinidae", "Pomacanthidae", "Scaridae", "Serranidae", "Sparidae", "Carangidae",
"Chaetodontidae", "Haemulidae", "Kyphosidae", "Mullidae", "Pomacentridae", "Dasyatidae", "Acanthuridae", "Muraenidae",
"Siganidae","Pseudochromidae", "Monacanthidae", "Tetraodontidae","Heterodontidae", "Lutjanidae", "Aulopidae", "Orectolobidae", "Clupeidae",
"Nemipteridae",  "Enoplosidae", "Myliobatidae",  "Scorpaenidae", "Scorpididae",   "Rhinidae", "Carcharhinidae","Sphyrnidae",
"Arripidae","Caesionidae",  "Scombridae",    "Gobiidae", "Pinguipedidae", "Cheilodactylidae", "Aracanidae",    "Microcanthidae",
"Platycephalidae", "Rhinobatidae", "Urolophidae",   "Ephippidae",   "Synodontidae",  "Blenniidae",   "Caesioscorpididae", "Apogonidae",   "Plesiopidae",
"Echeneidae",   "Cirrhitidae",   "Girellidae",   "Neosebastidae", "Scyliorhinidae", "Lamnidae", "Hemigaleidae",  "Sillaginidae",  "Grammistidae",
"Sphyraenidae",  "Pempheridae",  "Gerreidae","Alopiidae",  "Odacidae", "Sebastidae",   "Pleuronectidae", "Parascylliidae", "Rachycentridae","Zanclidae",
"Antennariidae", "Veliferidae",  "Triakidae","Terapontidae", "Berycidae","Dinolestidae", "Diodontidae",   "Oplegnathidae", "Pristiophoridae",
"Chironemidae",  "Gempylidae",    "Mobulidae",    "Balistidae",    "Cheloniidae",  "Holocentridae",  "Aulostomidae",  "Ginglymostomatidae",
"Ostraciidae",   "Malacanthidae", "Clinidae", "Microdesmidae", "Stegostomatidae", "Fistulariidae", "Belonidae",  "Albulidae","Priacanthidae",
"Hemiscylliidae","Tripterygiidae", "Odontaspididae","Plotosidae",   "Elopidae", "Paralichthyidae", "Bothidae", "Ariidae", "Latidae",  "Oneirodidae",
"Syngnathidae",  "Callionymidae", "Opistognathidae", "Centriscidae", "Trichonotidae", "Pristidae",   "Congridae","Chanidae", "Samaridae",
"Aplodactylidae", "Zeidae",   "Melanostomiidae", "Monodactylidae","Leiognathidae", "Atherinidae",   "Hemiramphidae", "Pentacerotidae",
"Triglidae", "Rhinopteridae", "Istiophoridae", "Soleidae", "Pimelodidae",  "Chirocentridae","Chimaeridae",  "Chlorophthalmidae",
"Squalidae",    "Polymixiidae",  "Centrophoridae", "Macrouridae",   "Centrolophidae", "Polyprionidae", "Zeniontidae", "Hexanchidae",
"Euclichthyidae",  "Torpedinidae",  "Macroramphosidae", "Rajidae",  "Trichiuridae", "Myxinidae","Trachichthyidae", "Etmopteridae",  "Ophidiidae",
"Moridae",  "Molidae",  "Acropomatidae", "Myctophidae",  "Tetrarogidae",  "Salangidae",   "Scatophagidae", "Acanthoclinidae" , "Ophichthidae",
"Gobiesocidae", "Carapidae","Peristediidae", "labridae", "carangidae",  "balistidae",    "cirrhitidae",   "Polynemidae",   "Mugilidae",
"Eleotridae",    "Tetrabrachiidae" , "caesionidae",   "serranidae",   "Trygonorrhinidae", "Sciaenidae",   "Pomatomidae",   "Stomiidae",
"Rhombosoleidae","Monocentridae", "Rhyncobatus",  "Glaucostegidae", "ACANTHURIDAE",  "BALISTIDAE", "BLENNIDEA","LABRIDAE", "MULLIDAE",
"PINGUIPEDIDAE", "POMACENTRIDAE", "SERRANIDAE",   "CARANGIDAE",    "CHAETODONTIDAE", "LETHRINIDAE",   "MOBULIDAE", "NEMIPTERIDAE",
"POMACANTHIDAE", "SCARIDAE", "SIGANIDAE",  "TETRAODONTIDAE","CIRRHITIDAE",  "DASYATIDAE",    "HOLOCENTRIDAE", "LUTJANIDAE",  "ANTHIINAE",
"CAESIONIDAE",   "GOBIIDAE", "PSEUDOCHROMIDAE", "MURAENIDAE", "HAEMULIDAE",  "EPHIPPIDAE", "MICRODESMIDAE", "SPHYRAENIDAE", "MONACANTHIDAE",
"MALACANTHIDAE", "DIODONTIDAE",   "ECHENEIDIDAE", "SPARIDAE", "OSTRACIIDAE",   "KYPHOSIDAE",    "SYNODONTIDAE",  "BLENNIDAE",
"CHARCHARHINIDAE", "PEMPHERIDAE",  "APLOACTINIDAE", "CONGRIDAE", "PRIACANTHIDAE", "HEMIRAMPHIDAE", "SCORPAENIDAE",  "APOGONIDAE",
"FISTULARIIDAE", "TORPEDINIDAE",  "Gadidae", "Lotidae", "Cottidae",   "Trachinidae",  "Anarhichadidae")
#maxn
maxn = select_fish_families_benthic(maxn, fish_families)
#fl
fl = select_fish_families_benthic(fl, fish_families)
### keep only opcodes that are available in meta in fl and maxn
# fl
fl <- keep_opcode_in_meta(meta, fl)
# maxn
maxn <- keep_opcode_in_meta(meta, maxn)
### remove from fl the opcodes not available in maxn, ie the single opcodes
#fl
fl <- remove_single_opcodes(fl, maxn)
#number of opcodes
length(unique(fl$NewOpCode))
length(unique(maxn$NewOpCode))
### assign empty opcodes in meta
meta <- assign_empty_opcodes_meta_benthic(meta, maxn)
### Add mean fork length data to maxn data based on a hierarchy for benthic bruvs
maxn <- add_mean_fl_to_maxn_data_benthic(fl, maxn)
names(fl)
NewOpCode" = "initial",
"Exped" = "initial",
"Year" = "initial",
"Family" = "initial",
"Genus" = "initial",
"Binomial" = "initial",
"Lengthcm" = "initial",
"computed" = "initial")
NewOpCode" = "initial",
"Exped" = "initial",
"Year" = "initial",
"Family" = "initial",
"Genus" = "initial",
"Binomial" = "initial",
"Lengthcm" = "initial",
"computed" = "initial")
dat_fl=fl
dat_maxn=maxn
#add rows to fl data for individuals with missing length
#add computed column to dat_fl
dat_fl %>%
dplyr::mutate("computed" = "no") -> dat_fl
#initiatlize empty raw
r0 <- data.frame("NewOpCode" = "initial",
"Exped" = "initial",
"Year" = "initial",
"Family" = "initial",
"Genus" = "initial",
"Binomial" = "initial",
"Lengthcm" = "initial",
"computed" = "initial")
#loop on opcode
unique(dat_fl$NewOpCode)
#loop on opcode
for (op in (unique(dat_fl$NewOpCode[1:100]))){
cat("-----------------opcode", op, "\n")
#for given opcode loop on species
for (sp in unique(dat_fl$Binomial[dat_fl$NewOpCode == op])){
cat("-----------------species", sp, "\n")
#get fl data corresponding to given opcode and species
datfl = subset(dat_fl, dat_fl$NewOpCode == op & dat_fl$Binomial == sp)
nfl = nrow(datfl)
#get maxn data corresponding to given opcode and species
datmaxn = subset(dat_maxn, dat_maxn$NewOpCode == op & dat_maxn$Binomial == sp)
#retrieve maxn value if available, otherwise set maxn to 0
if (nrow(datmaxn) >= 1){
valmaxn <- datmaxn$MaxN
}else{
valmaxn <- 0
}
#handle duplicated maxn (if there are 2 available maxn, keep larger one)
if (length(valmaxn) > 1){
valmaxn = max(valmaxn)
}
#calculate difference between maxn and nb of length measures
d = valmaxn - nfl
cat("difference between maxn and nb of length measures is", d, "\n")
#create rows by corresponding to individuals with missing length and set their length to mean length calculated in maxn (mean_fl)
if (d > 0) {
#create row without length
r = unique(datfl[, c("NewOpCode", "Exped", "Year", "Family", "Genus", "Binomial")])
#add length column to that row
r$Lengthcm <- unique(datmaxn$mean_fl)
#add computed column to that row
r$computed <- "yes"
#bind the rows d times
r <- do.call("rbind", replicate(d, r, simplify = FALSE))
#add these rows to previous rows
r0 <- rbind(r0, r)
}
}
}
unique(dat_fl$NewOpCode)
r0
#clean r0
r0 %>%
dplyr::filter(NewOpCode != "initial") %>%
dplyr::mutate(Lengthcm = as.numeric(Lengthcm)) -> r0
#bind these rows to fl
rbind(dat_fl, r0) -> new
cat("nb of added fl rows: ",  nrow(r0))
#load all functions
devtools::load_all()
########################################################################################################################################
########### benthic bruvs
### read benthic bruvs data
expeds <- read_exped()
fl <- read_fl_benthic()
maxn <- read_maxn_benthic()
meta <- read_meta_benthic()
### clean data
#clean meta
meta <- clean_meta_benthic(meta)
#clean fl
fl <- clean_fl_benthic(fl)
#clean maxn
maxn <- clean_maxn_benthic(maxn)
### remove expeditions that are not permitted to be used in this study
#select expeds based on permission
expeds_notpermitted <- expeds$`New Exped`[expeds$Permission == "No"]
#maxn
maxn <- removed_notpermitted_expeditions_benthic(maxn, expeds_notpermitted)
#fl
fl <- removed_notpermitted_expeditions_benthic(fl, expeds_notpermitted)
#meta
meta <- removed_notpermitted_expeditions_benthic(meta, expeds_notpermitted)
### select fish families
fish_families <- c("Glaucosomatidae", "Labridae", "Lethrinidae", "Pomacanthidae", "Scaridae", "Serranidae", "Sparidae", "Carangidae",
"Chaetodontidae", "Haemulidae", "Kyphosidae", "Mullidae", "Pomacentridae", "Dasyatidae", "Acanthuridae", "Muraenidae",
"Siganidae","Pseudochromidae", "Monacanthidae", "Tetraodontidae","Heterodontidae", "Lutjanidae", "Aulopidae", "Orectolobidae", "Clupeidae",
"Nemipteridae",  "Enoplosidae", "Myliobatidae",  "Scorpaenidae", "Scorpididae",   "Rhinidae", "Carcharhinidae","Sphyrnidae",
"Arripidae","Caesionidae",  "Scombridae",    "Gobiidae", "Pinguipedidae", "Cheilodactylidae", "Aracanidae",    "Microcanthidae",
"Platycephalidae", "Rhinobatidae", "Urolophidae",   "Ephippidae",   "Synodontidae",  "Blenniidae",   "Caesioscorpididae", "Apogonidae",   "Plesiopidae",
"Echeneidae",   "Cirrhitidae",   "Girellidae",   "Neosebastidae", "Scyliorhinidae", "Lamnidae", "Hemigaleidae",  "Sillaginidae",  "Grammistidae",
"Sphyraenidae",  "Pempheridae",  "Gerreidae","Alopiidae",  "Odacidae", "Sebastidae",   "Pleuronectidae", "Parascylliidae", "Rachycentridae","Zanclidae",
"Antennariidae", "Veliferidae",  "Triakidae","Terapontidae", "Berycidae","Dinolestidae", "Diodontidae",   "Oplegnathidae", "Pristiophoridae",
"Chironemidae",  "Gempylidae",    "Mobulidae",    "Balistidae",    "Cheloniidae",  "Holocentridae",  "Aulostomidae",  "Ginglymostomatidae",
"Ostraciidae",   "Malacanthidae", "Clinidae", "Microdesmidae", "Stegostomatidae", "Fistulariidae", "Belonidae",  "Albulidae","Priacanthidae",
"Hemiscylliidae","Tripterygiidae", "Odontaspididae","Plotosidae",   "Elopidae", "Paralichthyidae", "Bothidae", "Ariidae", "Latidae",  "Oneirodidae",
"Syngnathidae",  "Callionymidae", "Opistognathidae", "Centriscidae", "Trichonotidae", "Pristidae",   "Congridae","Chanidae", "Samaridae",
"Aplodactylidae", "Zeidae",   "Melanostomiidae", "Monodactylidae","Leiognathidae", "Atherinidae",   "Hemiramphidae", "Pentacerotidae",
"Triglidae", "Rhinopteridae", "Istiophoridae", "Soleidae", "Pimelodidae",  "Chirocentridae","Chimaeridae",  "Chlorophthalmidae",
"Squalidae",    "Polymixiidae",  "Centrophoridae", "Macrouridae",   "Centrolophidae", "Polyprionidae", "Zeniontidae", "Hexanchidae",
"Euclichthyidae",  "Torpedinidae",  "Macroramphosidae", "Rajidae",  "Trichiuridae", "Myxinidae","Trachichthyidae", "Etmopteridae",  "Ophidiidae",
"Moridae",  "Molidae",  "Acropomatidae", "Myctophidae",  "Tetrarogidae",  "Salangidae",   "Scatophagidae", "Acanthoclinidae" , "Ophichthidae",
"Gobiesocidae", "Carapidae","Peristediidae", "labridae", "carangidae",  "balistidae",    "cirrhitidae",   "Polynemidae",   "Mugilidae",
"Eleotridae",    "Tetrabrachiidae" , "caesionidae",   "serranidae",   "Trygonorrhinidae", "Sciaenidae",   "Pomatomidae",   "Stomiidae",
"Rhombosoleidae","Monocentridae", "Rhyncobatus",  "Glaucostegidae", "ACANTHURIDAE",  "BALISTIDAE", "BLENNIDEA","LABRIDAE", "MULLIDAE",
"PINGUIPEDIDAE", "POMACENTRIDAE", "SERRANIDAE",   "CARANGIDAE",    "CHAETODONTIDAE", "LETHRINIDAE",   "MOBULIDAE", "NEMIPTERIDAE",
"POMACANTHIDAE", "SCARIDAE", "SIGANIDAE",  "TETRAODONTIDAE","CIRRHITIDAE",  "DASYATIDAE",    "HOLOCENTRIDAE", "LUTJANIDAE",  "ANTHIINAE",
"CAESIONIDAE",   "GOBIIDAE", "PSEUDOCHROMIDAE", "MURAENIDAE", "HAEMULIDAE",  "EPHIPPIDAE", "MICRODESMIDAE", "SPHYRAENIDAE", "MONACANTHIDAE",
"MALACANTHIDAE", "DIODONTIDAE",   "ECHENEIDIDAE", "SPARIDAE", "OSTRACIIDAE",   "KYPHOSIDAE",    "SYNODONTIDAE",  "BLENNIDAE",
"CHARCHARHINIDAE", "PEMPHERIDAE",  "APLOACTINIDAE", "CONGRIDAE", "PRIACANTHIDAE", "HEMIRAMPHIDAE", "SCORPAENIDAE",  "APOGONIDAE",
"FISTULARIIDAE", "TORPEDINIDAE",  "Gadidae", "Lotidae", "Cottidae",   "Trachinidae",  "Anarhichadidae")
#maxn
maxn = select_fish_families_benthic(maxn, fish_families)
#fl
fl = select_fish_families_benthic(fl, fish_families)
### keep only opcodes that are available in meta in fl and maxn
# fl
fl <- keep_opcode_in_meta(meta, fl)
# maxn
maxn <- keep_opcode_in_meta(meta, maxn)
### remove from fl the opcodes not available in maxn, ie the single opcodes
#fl
fl <- remove_single_opcodes(fl, maxn)
#number of opcodes
length(unique(fl$NewOpCode))
length(unique(maxn$NewOpCode))
### assign empty opcodes in meta
meta <- assign_empty_opcodes_meta_benthic(meta, maxn)
### Add mean fork length data to maxn data based on a hierarchy for benthic bruvs
maxn <- add_mean_fl_to_maxn_data_benthic(fl, maxn)
View(meta)
### Add fork length data for individuals counted in maxn but with no available fork length
### for these individuals we assign the mean fork length calculated in maxn data
### for benthic bruvs
fl <- add_individual_fl_data_benthic(fl, maxn)
class(meta$Date)
format(meta$Date, "Y")
format(meta$Date, "%Y")
format(meta$Date, "%m")
#load all functions
devtools::load_all()
########################################################################################################################################
########### benthic bruvs
### read benthic bruvs data
expeds <- read_exped()
fl <- read_fl_benthic()
maxn <- read_maxn_benthic()
meta <- read_meta_benthic()
### clean data
#clean meta
meta <- clean_meta_benthic(meta)
#load all functions
devtools::load_all()
meta <- read_meta_benthic()
#clean meta
meta <- clean_meta_benthic(meta)
#load all functions
devtools::load_all()
#load all functions
devtools::load_all()
meta <- read_meta_benthic()
#clean meta
meta <- clean_meta_benthic(meta)
#load all functions
devtools::load_all()
#to use pipe operator
library(magrittr)
########################################################################################################################################
########### pelagic bruvs
### read pelagic bruvs data
meta <- read_meta_pelagic()
maxn <- read_maxn_pelagic()
fl <- read_fl_pelagic()
### clean data
# clean maxn
maxn <- clean_maxn_pelagic(maxn)
# clean fl
fl <- clean_fl_pelagic(fl)
# clean meta
meta <- clean_meta_pelagic(meta)
#load all functions
devtools::load_all()
#to use pipe operator
library(magrittr)
########################################################################################################################################
########### pelagic bruvs
### read pelagic bruvs data
meta <- read_meta_pelagic()
maxn <- read_maxn_pelagic()
fl <- read_fl_pelagic()
### clean data
# clean maxn
maxn <- clean_maxn_pelagic(maxn)
# clean fl
fl <- clean_fl_pelagic(fl)
# clean meta
meta <- clean_meta_pelagic(meta)
dat=meta
write.csv(dat, here::here("outputs", "benthic", "benthic_opcodes.csv"))
#load all functions
devtools::load_all()
#load all functions
devtools::load_all()
#to use pipe operator
library(magrittr)
########################################################################################################################################
########### pelagic bruvs
### read pelagic bruvs data
meta <- read_meta_pelagic()
maxn <- read_maxn_pelagic()
fl <- read_fl_pelagic()
### clean data
# clean maxn
maxn <- clean_maxn_pelagic(maxn)
# clean fl
fl <- clean_fl_pelagic(fl)
# clean meta
meta <- clean_meta_pelagic(meta)
### select fish families
fish_families <- c("Nomeidae", "Istiophoridae", "Fistulariidae", "Coryphaenidae", "Scombridae", "Carangidae", "Myliobatidae",
"Echeneidae", "Gerreidae", "Carcharhinidae", "Sphyrnidae", "Exocoetidae", "Monacanthidae", "Lamnidae",
"Balistidae", "Molidae", "Caproidae", "Centriscidae", "Centrolophidae", "Dasyatidae", "Clupeidae",
"Blenniidae", "Mullidae", "Priacanthidae", "Sphyraenidae", "Apogonidae", "Tetraodontidae",
"Pomacentridae", "Lutjanidae", "Labridae", "Syngnathidae", "Sparidae", "Kyphosidae", "Rachycentridae",
"Belonidae", "Acanthuridae", "Caesionidae", "Aulostomidae", "Platax", "Engraulidae", "Chanidae",
"Nematistiidae", "Lobotidae", "Macroramphosidae", "Ephippidae")
# fl
fl <- select_fish_families_pelagic(fl, fish_families)
# maxn
maxn <- select_fish_families_pelagic(maxn, fish_families)
### keep only opcodes that are available in meta in fl and maxn
# fl
fl <- keep_opcode_in_meta(meta, fl)
# maxn
maxn <- keep_opcode_in_meta(meta, maxn)
### remove from fl the opcodes not available in maxn, ie the single opcodes
#fl
fl <- remove_single_opcodes(fl, maxn)
#number of opcodes
length(unique(fl$NewOpCode))
length(unique(maxn$NewOpCode))
### assign empty opcodes in meta
meta <- assign_empty_opcodes_meta_pelagic(meta, maxn)
### write meta opcodes for pelagic bruvs
write_meta_opcodes_pelagic(meta)
########################################################################################################################################
########### benthic bruvs
### read benthic bruvs data
expeds <- read_exped()
fl <- read_fl_benthic()
maxn <- read_maxn_benthic()
meta <- read_meta_benthic()
### clean data
#clean meta
meta <- clean_meta_benthic(meta)
#clean fl
fl <- clean_fl_benthic(fl)
#clean maxn
maxn <- clean_maxn_benthic(maxn)
### remove expeditions that are not permitted to be used in this study
#select expeds based on permission
expeds_notpermitted <- expeds$`New Exped`[expeds$Permission == "No"]
#maxn
maxn <- removed_notpermitted_expeditions_benthic(maxn, expeds_notpermitted)
#fl
fl <- removed_notpermitted_expeditions_benthic(fl, expeds_notpermitted)
#meta
meta <- removed_notpermitted_expeditions_benthic(meta, expeds_notpermitted)
### select fish families
fish_families <- c("Glaucosomatidae", "Labridae", "Lethrinidae", "Pomacanthidae", "Scaridae", "Serranidae", "Sparidae", "Carangidae",
"Chaetodontidae", "Haemulidae", "Kyphosidae", "Mullidae", "Pomacentridae", "Dasyatidae", "Acanthuridae", "Muraenidae",
"Siganidae","Pseudochromidae", "Monacanthidae", "Tetraodontidae","Heterodontidae", "Lutjanidae", "Aulopidae", "Orectolobidae", "Clupeidae",
"Nemipteridae",  "Enoplosidae", "Myliobatidae",  "Scorpaenidae", "Scorpididae",   "Rhinidae", "Carcharhinidae","Sphyrnidae",
"Arripidae","Caesionidae",  "Scombridae",    "Gobiidae", "Pinguipedidae", "Cheilodactylidae", "Aracanidae",    "Microcanthidae",
"Platycephalidae", "Rhinobatidae", "Urolophidae",   "Ephippidae",   "Synodontidae",  "Blenniidae",   "Caesioscorpididae", "Apogonidae",   "Plesiopidae",
"Echeneidae",   "Cirrhitidae",   "Girellidae",   "Neosebastidae", "Scyliorhinidae", "Lamnidae", "Hemigaleidae",  "Sillaginidae",  "Grammistidae",
"Sphyraenidae",  "Pempheridae",  "Gerreidae","Alopiidae",  "Odacidae", "Sebastidae",   "Pleuronectidae", "Parascylliidae", "Rachycentridae","Zanclidae",
"Antennariidae", "Veliferidae",  "Triakidae","Terapontidae", "Berycidae","Dinolestidae", "Diodontidae",   "Oplegnathidae", "Pristiophoridae",
"Chironemidae",  "Gempylidae",    "Mobulidae",    "Balistidae",    "Cheloniidae",  "Holocentridae",  "Aulostomidae",  "Ginglymostomatidae",
"Ostraciidae",   "Malacanthidae", "Clinidae", "Microdesmidae", "Stegostomatidae", "Fistulariidae", "Belonidae",  "Albulidae","Priacanthidae",
"Hemiscylliidae","Tripterygiidae", "Odontaspididae","Plotosidae",   "Elopidae", "Paralichthyidae", "Bothidae", "Ariidae", "Latidae",  "Oneirodidae",
"Syngnathidae",  "Callionymidae", "Opistognathidae", "Centriscidae", "Trichonotidae", "Pristidae",   "Congridae","Chanidae", "Samaridae",
"Aplodactylidae", "Zeidae",   "Melanostomiidae", "Monodactylidae","Leiognathidae", "Atherinidae",   "Hemiramphidae", "Pentacerotidae",
"Triglidae", "Rhinopteridae", "Istiophoridae", "Soleidae", "Pimelodidae",  "Chirocentridae","Chimaeridae",  "Chlorophthalmidae",
"Squalidae",    "Polymixiidae",  "Centrophoridae", "Macrouridae",   "Centrolophidae", "Polyprionidae", "Zeniontidae", "Hexanchidae",
"Euclichthyidae",  "Torpedinidae",  "Macroramphosidae", "Rajidae",  "Trichiuridae", "Myxinidae","Trachichthyidae", "Etmopteridae",  "Ophidiidae",
"Moridae",  "Molidae",  "Acropomatidae", "Myctophidae",  "Tetrarogidae",  "Salangidae",   "Scatophagidae", "Acanthoclinidae" , "Ophichthidae",
"Gobiesocidae", "Carapidae","Peristediidae", "labridae", "carangidae",  "balistidae",    "cirrhitidae",   "Polynemidae",   "Mugilidae",
"Eleotridae",    "Tetrabrachiidae" , "caesionidae",   "serranidae",   "Trygonorrhinidae", "Sciaenidae",   "Pomatomidae",   "Stomiidae",
"Rhombosoleidae","Monocentridae", "Rhyncobatus",  "Glaucostegidae", "ACANTHURIDAE",  "BALISTIDAE", "BLENNIDEA","LABRIDAE", "MULLIDAE",
"PINGUIPEDIDAE", "POMACENTRIDAE", "SERRANIDAE",   "CARANGIDAE",    "CHAETODONTIDAE", "LETHRINIDAE",   "MOBULIDAE", "NEMIPTERIDAE",
"POMACANTHIDAE", "SCARIDAE", "SIGANIDAE",  "TETRAODONTIDAE","CIRRHITIDAE",  "DASYATIDAE",    "HOLOCENTRIDAE", "LUTJANIDAE",  "ANTHIINAE",
"CAESIONIDAE",   "GOBIIDAE", "PSEUDOCHROMIDAE", "MURAENIDAE", "HAEMULIDAE",  "EPHIPPIDAE", "MICRODESMIDAE", "SPHYRAENIDAE", "MONACANTHIDAE",
"MALACANTHIDAE", "DIODONTIDAE",   "ECHENEIDIDAE", "SPARIDAE", "OSTRACIIDAE",   "KYPHOSIDAE",    "SYNODONTIDAE",  "BLENNIDAE",
"CHARCHARHINIDAE", "PEMPHERIDAE",  "APLOACTINIDAE", "CONGRIDAE", "PRIACANTHIDAE", "HEMIRAMPHIDAE", "SCORPAENIDAE",  "APOGONIDAE",
"FISTULARIIDAE", "TORPEDINIDAE",  "Gadidae", "Lotidae", "Cottidae",   "Trachinidae",  "Anarhichadidae")
#maxn
maxn = select_fish_families_benthic(maxn, fish_families)
#fl
fl = select_fish_families_benthic(fl, fish_families)
### keep only opcodes that are available in meta in fl and maxn
# fl
fl <- keep_opcode_in_meta(meta, fl)
# maxn
maxn <- keep_opcode_in_meta(meta, maxn)
### remove from fl the opcodes not available in maxn, ie the single opcodes
#fl
fl <- remove_single_opcodes(fl, maxn)
#number of opcodes
length(unique(fl$NewOpCode))
length(unique(maxn$NewOpCode))
### assign empty opcodes in meta
meta <- assign_empty_opcodes_meta_benthic(meta, maxn)
### write meta opcodes for benthic bruvs
write_meta_opcodes_benthic(meta)
#load all functions
devtools::load_all()
devtools::load_all()
#to use pipe operator
library(magrittr)
########################################################################################################################################
########### pelagic bruvs
### read pelagic bruvs data
meta <- read_meta_pelagic()
maxn <- read_maxn_pelagic()
fl <- read_fl_pelagic()
### clean data
# clean maxn
maxn <- clean_maxn_pelagic(maxn)
# clean fl
fl <- clean_fl_pelagic(fl)
# clean meta
meta <- clean_meta_pelagic(meta)
### select fish families
fish_families <- c("Nomeidae", "Istiophoridae", "Fistulariidae", "Coryphaenidae", "Scombridae", "Carangidae", "Myliobatidae",
"Echeneidae", "Gerreidae", "Carcharhinidae", "Sphyrnidae", "Exocoetidae", "Monacanthidae", "Lamnidae",
"Balistidae", "Molidae", "Caproidae", "Centriscidae", "Centrolophidae", "Dasyatidae", "Clupeidae",
"Blenniidae", "Mullidae", "Priacanthidae", "Sphyraenidae", "Apogonidae", "Tetraodontidae",
"Pomacentridae", "Lutjanidae", "Labridae", "Syngnathidae", "Sparidae", "Kyphosidae", "Rachycentridae",
"Belonidae", "Acanthuridae", "Caesionidae", "Aulostomidae", "Platax", "Engraulidae", "Chanidae",
"Nematistiidae", "Lobotidae", "Macroramphosidae", "Ephippidae")
# fl
fl <- select_fish_families_pelagic(fl, fish_families)
# maxn
maxn <- select_fish_families_pelagic(maxn, fish_families)
### keep only opcodes that are available in meta in fl and maxn
# fl
fl <- keep_opcode_in_meta(meta, fl)
# maxn
maxn <- keep_opcode_in_meta(meta, maxn)
### remove from fl the opcodes not available in maxn, ie the single opcodes
#fl
fl <- remove_single_opcodes(fl, maxn)
#number of opcodes
length(unique(fl$NewOpCode))
length(unique(maxn$NewOpCode))
### assign empty opcodes in meta
meta <- assign_empty_opcodes_meta_pelagic(meta, maxn)
### write meta opcodes for pelagic bruvs
write_meta_opcodes_pelagic(meta)
#load all functions
devtools::load_all()
#to use pipe operator
library(magrittr)
########################################################################################################################################
########### pelagic bruvs
### read pelagic bruvs data
meta <- read_meta_pelagic()
View(meta)
# clean meta
meta <- clean_meta_pelagic(meta)
### assign empty opcodes in meta
meta <- assign_empty_opcodes_meta_pelagic(meta, maxn)
plot(meta$lon_in, meta$lat_in)
maps::map('world', fill=T, col= "grey", xlim = c(30, 90), ylim = c(-25, 30))
maps::map('world', fill=T, col= "grey")
plot(meta$lon_in, meta$lat_in, add=T)
sp::plot(meta, add=T)
maps::map('world', fill=T, col= "grey")
plot(meta$lon_in, meta$lat_in)
maps::map('world', fill=T, col= "grey")
sp::plot(meta, add=T)
warnings()
########################################################################################################################################
########### benthic bruvs
### read benthic bruvs data
expeds <- read_exped()
fl <- read_fl_benthic()
maxn <- read_maxn_benthic()
meta <- read_meta_benthic()
### clean data
#clean meta
meta <- clean_meta_benthic(meta)
plot(meta$lon_in, meta$lat_in)
plot(meta$Long, meta$Lat)
