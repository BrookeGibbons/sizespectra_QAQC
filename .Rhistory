"Location" = unique(dat_maxn$Location[dat_maxn$NewOpCode == op]),
"Family" = dat_maxn$Family[dat_maxn$NewOpCode == op & dat_maxn$Binomial == sp],
"Genus" = dat_maxn$Genus[dat_maxn$NewOpCode == op & dat_maxn$Binomial == sp],
"Binomial" = dat_maxn$Binomial[dat_maxn$NewOpCode == op & dat_maxn$Binomial == sp])
#add length column to that row
r$Lengthcm <- unique(datmaxn$mean_fl)
#add computed column to that row
r$computed <- "yes"
#bind the rows d times
r <- do.call("rbind", replicate(d, r, simplify = FALSE))
#add these rows to previous rows
r0 <- rbind(r0, r)
r0
#load all functions
devtools::load_all()
#to use pipe operator
library(magrittr)
########################################################################################################################################
# read and clean bruvs data
########################################################################################################################################
########################################################################################################################################
########### pelagic bruvs
### read pelagic bruvs data
meta <- read_meta_pelagic()
maxn1 <- read_maxn_pelagic()
fl1 <- read_fl_pelagic()
### get missing pelagic bruvs data for maxn and fl (2 expeditions)
maxn2 <- get_missing_maxn_pelagic()
fl2 <- get_missing_fl_pelagic()
### clean data
# clean maxn
maxn1 <- clean_maxn_pelagic(maxn1)
maxn2 <- clean_maxn_pelagic(maxn2)
# clean fl
fl1 <- clean_fl_pelagic(fl1)
fl2 <- clean_fl_pelagic(fl2)
# clean meta
meta <- clean_meta_pelagic(meta)
### bind maxn and fl pelagic data
maxn <- bind_pelagic(maxn1, maxn2)
fl <- bind_pelagic(fl1, fl2)
### select fish families
fish_families <- c("Nomeidae", "Istiophoridae", "Fistulariidae", "Coryphaenidae", "Scombridae", "Carangidae", "Myliobatidae",
"Echeneidae", "Gerreidae", "Carcharhinidae", "Sphyrnidae", "Exocoetidae", "Monacanthidae", "Lamnidae",
"Balistidae", "Molidae", "Caproidae", "Centriscidae", "Centrolophidae", "Dasyatidae", "Clupeidae",
"Blenniidae", "Mullidae", "Priacanthidae", "Sphyraenidae", "Apogonidae", "Tetraodontidae",
"Pomacentridae", "Lutjanidae", "Labridae", "Syngnathidae", "Sparidae", "Kyphosidae", "Rachycentridae",
"Belonidae", "Acanthuridae", "Caesionidae", "Aulostomidae", "Platax", "Engraulidae", "Chanidae",
"Nematistiidae", "Lobotidae", "Macroramphosidae", "Ephippidae", "Rhincodontidae")
# fl
fl <- select_fish_families_pelagic(fl, fish_families)
# maxn
maxn <- select_fish_families_pelagic(maxn, fish_families)
### keep only opcodes that are available in meta in fl and maxn
# fl
fl <- keep_opcode_in_meta(meta, fl)
# maxn
maxn <- keep_opcode_in_meta(meta, maxn)
### remove from fl the opcodes not available in maxn, ie the single opcodes
#fl
fl <- remove_single_opcodes(fl, maxn)
#number of opcodes
length(unique(fl$NewOpCode))
length(unique(maxn$NewOpCode))
#number of strings
length(unique(fl$String))
length(unique(maxn$String))
### assign empty opcodes in meta
meta <- assign_empty_opcodes_meta_pelagic(meta, maxn)
### write meta opcodes for pelagic bruvs
write_meta_opcodes_pelagic(meta)
### write meta strings for pelagic bruvs
write_meta_strings_pelagic(meta)
### Add mean fork length data to maxn data based on a hierarchy for pelagic bruvs
maxn <- add_mean_fl_to_maxn_data_pelagic(fl, maxn)
### Add fork length data for individuals counted in maxn but with no available fork length
### for these individuals we assign the mean fork length calculated in maxn data
### for pelagic bruvs
fl <- add_individual_fl_data_pelagic(fl, maxn)
### Estimate weight from observed length for a taxa using rfishbase
fl <- estimate_weight_from_length(fl)
fl
dat_meta=meta_pelagic
dat_fl=fl_pelagic
dat_meta %>%
dplyr::mutate(Type = "Midwater") %>%
dplyr::mutate(Type = as.factor(Type)) %>%
dplyr::rename("Exped" = "exped")  -> dat_meta_new
dat_fl %>%
dplyr::select("NewOpCode", "Family", "Binomial", "Lengthcm", "weight_kg") %>%
dplyr::full_join(dat_meta_new[, c("NewOpCode", "string","lon_in", "lat_in", "Exped", "Type", "Date")], by ="NewOpCode") -> dat_fl_meta
### rename objects before saving
maxn_pelagic = maxn
fl_pelagic = fl
meta_pelagic = meta
dat_fl=fl_pelagic
dat_meta=meta_pelagic
dat_fl=fl_pelagic
dat_meta %>%
dplyr::mutate(Type = "Midwater") %>%
dplyr::mutate(Type = as.factor(Type)) %>%
dplyr::rename("Exped" = "exped")  -> dat_meta_new
dat_fl %>%
dplyr::select("NewOpCode", "Family", "Binomial", "Lengthcm", "weight_kg") %>%
dplyr::full_join(dat_meta_new[, c("NewOpCode", "string","lon_in", "lat_in", "Exped", "Type", "Date")], by ="NewOpCode") -> dat_fl_meta
op
unique(dat_maxn$Binomial[dat_maxn$NewOpCode == op])
sp= "Echeneis naucrates"
cat("-----------------species", sp, "\n")
#get fl data corresponding to given opcode and species
datfl = subset(dat_fl, dat_fl$NewOpCode == op & dat_fl$Binomial == sp)
nfl = nrow(datfl)
#get maxn data corresponding to given opcode and species
datmaxn = subset(dat_maxn, dat_maxn$NewOpCode == op & dat_maxn$Binomial == sp)
nfl
datfl
#load all functions
devtools::load_all()
#to use pipe operator
library(magrittr)
########################################################################################################################################
# read and clean bruvs data
########################################################################################################################################
########################################################################################################################################
########### pelagic bruvs
### read pelagic bruvs data
meta <- read_meta_pelagic()
maxn1 <- read_maxn_pelagic()
fl1 <- read_fl_pelagic()
### get missing pelagic bruvs data for maxn and fl (2 expeditions)
maxn2 <- get_missing_maxn_pelagic()
fl2 <- get_missing_fl_pelagic()
### clean data
# clean maxn
maxn1 <- clean_maxn_pelagic(maxn1)
maxn2 <- clean_maxn_pelagic(maxn2)
# clean fl
fl1 <- clean_fl_pelagic(fl1)
fl2 <- clean_fl_pelagic(fl2)
# clean meta
meta <- clean_meta_pelagic(meta)
### bind maxn and fl pelagic data
maxn <- bind_pelagic(maxn1, maxn2)
fl <- bind_pelagic(fl1, fl2)
### select fish families
fish_families <- c("Nomeidae", "Istiophoridae", "Fistulariidae", "Coryphaenidae", "Scombridae", "Carangidae", "Myliobatidae",
"Echeneidae", "Gerreidae", "Carcharhinidae", "Sphyrnidae", "Exocoetidae", "Monacanthidae", "Lamnidae",
"Balistidae", "Molidae", "Caproidae", "Centriscidae", "Centrolophidae", "Dasyatidae", "Clupeidae",
"Blenniidae", "Mullidae", "Priacanthidae", "Sphyraenidae", "Apogonidae", "Tetraodontidae",
"Pomacentridae", "Lutjanidae", "Labridae", "Syngnathidae", "Sparidae", "Kyphosidae", "Rachycentridae",
"Belonidae", "Acanthuridae", "Caesionidae", "Aulostomidae", "Platax", "Engraulidae", "Chanidae",
"Nematistiidae", "Lobotidae", "Macroramphosidae", "Ephippidae", "Rhincodontidae")
# fl
fl <- select_fish_families_pelagic(fl, fish_families)
# maxn
maxn <- select_fish_families_pelagic(maxn, fish_families)
### keep only opcodes that are available in meta in fl and maxn
# fl
fl <- keep_opcode_in_meta(meta, fl)
# maxn
maxn <- keep_opcode_in_meta(meta, maxn)
### remove from fl the opcodes not available in maxn, ie the single opcodes
#fl
fl <- remove_single_opcodes(fl, maxn)
#number of opcodes
length(unique(fl$NewOpCode))
length(unique(maxn$NewOpCode))
#number of strings
length(unique(fl$String))
length(unique(maxn$String))
### assign empty opcodes in meta
meta <- assign_empty_opcodes_meta_pelagic(meta, maxn)
### write meta opcodes for pelagic bruvs
write_meta_opcodes_pelagic(meta)
### write meta strings for pelagic bruvs
write_meta_strings_pelagic(meta)
### Add mean fork length data to maxn data based on a hierarchy for pelagic bruvs
maxn <- add_mean_fl_to_maxn_data_pelagic(fl, maxn)
### Add fork length data for individuals counted in maxn but with no available fork length
### for these individuals we assign the mean fork length calculated in maxn data
### for pelagic bruvs
fl <- add_individual_fl_data_pelagic(fl, maxn)
### Estimate weight from observed length for a taxa using rfishbase
fl <- estimate_weight_from_length(fl)
#load all functions
devtools::load_all()
#to use pipe operator
library(magrittr)
########################################################################################################################################
# read and clean bruvs data
########################################################################################################################################
########################################################################################################################################
########### pelagic bruvs
### read pelagic bruvs data
meta <- read_meta_pelagic()
maxn1 <- read_maxn_pelagic()
fl1 <- read_fl_pelagic()
### get missing pelagic bruvs data for maxn and fl (2 expeditions)
maxn2 <- get_missing_maxn_pelagic()
fl2 <- get_missing_fl_pelagic()
### clean data
# clean maxn
maxn1 <- clean_maxn_pelagic(maxn1)
maxn2 <- clean_maxn_pelagic(maxn2)
# clean fl
fl1 <- clean_fl_pelagic(fl1)
fl2 <- clean_fl_pelagic(fl2)
# clean meta
meta <- clean_meta_pelagic(meta)
### bind maxn and fl pelagic data
maxn <- bind_pelagic(maxn1, maxn2)
fl <- bind_pelagic(fl1, fl2)
### select fish families
fish_families <- c("Nomeidae", "Istiophoridae", "Fistulariidae", "Coryphaenidae", "Scombridae", "Carangidae", "Myliobatidae",
"Echeneidae", "Gerreidae", "Carcharhinidae", "Sphyrnidae", "Exocoetidae", "Monacanthidae", "Lamnidae",
"Balistidae", "Molidae", "Caproidae", "Centriscidae", "Centrolophidae", "Dasyatidae", "Clupeidae",
"Blenniidae", "Mullidae", "Priacanthidae", "Sphyraenidae", "Apogonidae", "Tetraodontidae",
"Pomacentridae", "Lutjanidae", "Labridae", "Syngnathidae", "Sparidae", "Kyphosidae", "Rachycentridae",
"Belonidae", "Acanthuridae", "Caesionidae", "Aulostomidae", "Platax", "Engraulidae", "Chanidae",
"Nematistiidae", "Lobotidae", "Macroramphosidae", "Ephippidae", "Rhincodontidae")
# fl
fl <- select_fish_families_pelagic(fl, fish_families)
# maxn
maxn <- select_fish_families_pelagic(maxn, fish_families)
### keep only opcodes that are available in meta in fl and maxn
# fl
fl <- keep_opcode_in_meta(meta, fl)
# maxn
maxn <- keep_opcode_in_meta(meta, maxn)
### remove from fl the opcodes not available in maxn, ie the single opcodes
#fl
fl <- remove_single_opcodes(fl, maxn)
#number of opcodes
length(unique(fl$NewOpCode))
length(unique(maxn$NewOpCode))
#number of strings
length(unique(fl$String))
length(unique(maxn$String))
### assign empty opcodes in meta
meta <- assign_empty_opcodes_meta_pelagic(meta, maxn)
### write meta opcodes for pelagic bruvs
write_meta_opcodes_pelagic(meta)
### write meta strings for pelagic bruvs
write_meta_strings_pelagic(meta)
### Add mean fork length data to maxn data based on a hierarchy for pelagic bruvs
maxn <- add_mean_fl_to_maxn_data_pelagic(fl, maxn)
### Add fork length data for individuals counted in maxn but with no available fork length
### for these individuals we assign the mean fork length calculated in maxn data
### for pelagic bruvs
dat_fl=fl
dat_maxn=maxn
#add rows to fl data for individuals with missing length
#add computed column to dat_fl
dat_fl %>%
dplyr::mutate("computed" = "no") -> dat_fl
#initiatlize empty raw
r0 <- data.frame("NewOpCode" = "initial",
"String" = "initial",
"Exped" = "initial",
"Year" = "initial",
"Location" = "initial",
"Family" = "initial",
"Genus" = "initial",
"Binomial" = "initial",
"Lengthcm" = "initial",
"computed" = "initial")
op= "FPP13_099"
unique(dat_maxn$Binomial[dat_maxn$NewOpCode == op])
sp= "Echeneis naucrates"
#get fl data corresponding to given opcode and species
datfl = subset(dat_fl, dat_fl$NewOpCode == op & dat_fl$Binomial == sp)
nfl = nrow(datfl)
nfl
#get maxn data corresponding to given opcode and species
datmaxn = subset(dat_maxn, dat_maxn$NewOpCode == op & dat_maxn$Binomial == sp)
datmaxn
#retrieve maxn value if available, otherwise set maxn to 0
if (nrow(datmaxn) >= 1){
valmaxn <- datmaxn$MaxN
}else{
valmaxn <- 0
}
valmaxn
#handle duplicated maxn (if there are 2 available maxn, keep larger one)
if (length(valmaxn) > 1){
valmaxn = max(valmaxn)
}
#calculate difference between maxn and nb of length measures
d = valmaxn - nfl
cat("difference between maxn and nb of length measures is", d, "\n")
#create row without length
r <- data.frame("NewOpCode" = op,
"String" = unique(dat_maxn$String[dat_maxn$NewOpCode == op]),
"Exped" = unique(dat_maxn$Exped[dat_maxn$NewOpCode == op]),
"Year" = unique(dat_maxn$Year[dat_maxn$NewOpCode == op]),
"Location" = unique(dat_maxn$Location[dat_maxn$NewOpCode == op]),
"Family" = dat_maxn$Family[dat_maxn$NewOpCode == op & dat_maxn$Binomial == sp],
"Genus" = dat_maxn$Genus[dat_maxn$NewOpCode == op & dat_maxn$Binomial == sp],
"Binomial" = dat_maxn$Binomial[dat_maxn$NewOpCode == op & dat_maxn$Binomial == sp])
#add length column to that row
r$Lengthcm <- unique(datmaxn$mean_fl)
#add computed column to that row
r$computed <- "yes"
#bind the rows d times
r <- do.call("rbind", replicate(d, r, simplify = FALSE))
#add these rows to previous rows
r0 <- rbind(r0, r)
r0
unique(dat_maxn$Binomial[dat_maxn$NewOpCode == op])
dat_fl
unique(dat_maxn$Binomial[dat_maxn$NewOpCode == op])
#for given opcode loop on species
for (sp in unique(dat_maxn$Binomial[dat_maxn$NewOpCode == op])){
cat("-----------------species", sp, "\n")
#get fl data corresponding to given opcode and species
datfl = subset(dat_fl, dat_fl$NewOpCode == op & dat_fl$Binomial == sp)
nfl = nrow(datfl)
#get maxn data corresponding to given opcode and species
datmaxn = subset(dat_maxn, dat_maxn$NewOpCode == op & dat_maxn$Binomial == sp)
#retrieve maxn value if available, otherwise set maxn to 0
if (nrow(datmaxn) >= 1){
valmaxn <- datmaxn$MaxN
}else{
valmaxn <- 0
}
#handle duplicated maxn (if there are 2 available maxn, keep larger one)
if (length(valmaxn) > 1){
valmaxn = max(valmaxn)
}
#calculate difference between maxn and nb of length measures
d = valmaxn - nfl
cat("difference between maxn and nb of length measures is", d, "\n")
#create rows corresponding to individuals with missing length and set their length to mean length calculated in maxn (mean_fl)
if (d > 0) {
#case when the opcode exists in fl
if (nfl != 0){
#create row without length
r = unique(datfl[, c("NewOpCode", "String", "Exped", "Year", "Location", "Family", "Genus", "Binomial")])
#add length column to that row
r$Lengthcm <- unique(datmaxn$mean_fl)
#add computed column to that row
r$computed <- "yes"
#bind the rows d times
r <- do.call("rbind", replicate(d, r, simplify = FALSE))
#add these rows to previous rows
r0 <- rbind(r0, r)
}
#case when opcode does not exist in fl
if (nfl == 0){
#create row without length
r <- data.frame("NewOpCode" = op,
"String" = unique(dat_maxn$String[dat_maxn$NewOpCode == op]),
"Exped" = unique(dat_maxn$Exped[dat_maxn$NewOpCode == op]),
"Year" = unique(dat_maxn$Year[dat_maxn$NewOpCode == op]),
"Location" = unique(dat_maxn$Location[dat_maxn$NewOpCode == op]),
"Family" = dat_maxn$Family[dat_maxn$NewOpCode == op & dat_maxn$Binomial == sp],
"Genus" = dat_maxn$Genus[dat_maxn$NewOpCode == op & dat_maxn$Binomial == sp],
"Binomial" = dat_maxn$Binomial[dat_maxn$NewOpCode == op & dat_maxn$Binomial == sp])
#add length column to that row
r$Lengthcm <- unique(datmaxn$mean_fl)
#add computed column to that row
r$computed <- "yes"
#bind the rows d times
r <- do.call("rbind", replicate(d, r, simplify = FALSE))
#add these rows to previous rows
r0 <- rbind(r0, r)
}
}
}
r0
#initiatlize empty raw
r0 <- data.frame("NewOpCode" = "initial",
"String" = "initial",
"Exped" = "initial",
"Year" = "initial",
"Location" = "initial",
"Family" = "initial",
"Genus" = "initial",
"Binomial" = "initial",
"Lengthcm" = "initial",
"computed" = "initial")
#for given opcode loop on species
for (sp in unique(dat_maxn$Binomial[dat_maxn$NewOpCode == op])){
cat("-----------------species", sp, "\n")
#get fl data corresponding to given opcode and species
datfl = subset(dat_fl, dat_fl$NewOpCode == op & dat_fl$Binomial == sp)
nfl = nrow(datfl)
#get maxn data corresponding to given opcode and species
datmaxn = subset(dat_maxn, dat_maxn$NewOpCode == op & dat_maxn$Binomial == sp)
#retrieve maxn value if available, otherwise set maxn to 0
if (nrow(datmaxn) >= 1){
valmaxn <- datmaxn$MaxN
}else{
valmaxn <- 0
}
#handle duplicated maxn (if there are 2 available maxn, keep larger one)
if (length(valmaxn) > 1){
valmaxn = max(valmaxn)
}
#calculate difference between maxn and nb of length measures
d = valmaxn - nfl
cat("difference between maxn and nb of length measures is", d, "\n")
#create rows corresponding to individuals with missing length and set their length to mean length calculated in maxn (mean_fl)
if (d > 0) {
#case when the opcode exists in fl
if (nfl != 0){
#create row without length
r = unique(datfl[, c("NewOpCode", "String", "Exped", "Year", "Location", "Family", "Genus", "Binomial")])
#add length column to that row
r$Lengthcm <- unique(datmaxn$mean_fl)
#add computed column to that row
r$computed <- "yes"
#bind the rows d times
r <- do.call("rbind", replicate(d, r, simplify = FALSE))
#add these rows to previous rows
r0 <- rbind(r0, r)
}
#case when opcode does not exist in fl
if (nfl == 0){
#create row without length
r <- data.frame("NewOpCode" = op,
"String" = unique(dat_maxn$String[dat_maxn$NewOpCode == op]),
"Exped" = unique(dat_maxn$Exped[dat_maxn$NewOpCode == op]),
"Year" = unique(dat_maxn$Year[dat_maxn$NewOpCode == op]),
"Location" = unique(dat_maxn$Location[dat_maxn$NewOpCode == op]),
"Family" = dat_maxn$Family[dat_maxn$NewOpCode == op & dat_maxn$Binomial == sp],
"Genus" = dat_maxn$Genus[dat_maxn$NewOpCode == op & dat_maxn$Binomial == sp],
"Binomial" = dat_maxn$Binomial[dat_maxn$NewOpCode == op & dat_maxn$Binomial == sp])
#add length column to that row
r$Lengthcm <- unique(datmaxn$mean_fl)
#add computed column to that row
r$computed <- "yes"
#bind the rows d times
r <- do.call("rbind", replicate(d, r, simplify = FALSE))
#add these rows to previous rows
r0 <- rbind(r0, r)
}
}
}
r0
#load all functions
devtools::load_all()
#to use pipe operator
library(magrittr)
########################################################################################################################################
# read and clean bruvs data
########################################################################################################################################
########################################################################################################################################
########### pelagic bruvs
### read pelagic bruvs data
meta <- read_meta_pelagic()
maxn1 <- read_maxn_pelagic()
fl1 <- read_fl_pelagic()
### get missing pelagic bruvs data for maxn and fl (2 expeditions)
maxn2 <- get_missing_maxn_pelagic()
fl2 <- get_missing_fl_pelagic()
### clean data
# clean maxn
maxn1 <- clean_maxn_pelagic(maxn1)
maxn2 <- clean_maxn_pelagic(maxn2)
# clean fl
fl1 <- clean_fl_pelagic(fl1)
fl2 <- clean_fl_pelagic(fl2)
# clean meta
meta <- clean_meta_pelagic(meta)
### bind maxn and fl pelagic data
maxn <- bind_pelagic(maxn1, maxn2)
fl <- bind_pelagic(fl1, fl2)
### select fish families
fish_families <- c("Nomeidae", "Istiophoridae", "Fistulariidae", "Coryphaenidae", "Scombridae", "Carangidae", "Myliobatidae",
"Echeneidae", "Gerreidae", "Carcharhinidae", "Sphyrnidae", "Exocoetidae", "Monacanthidae", "Lamnidae",
"Balistidae", "Molidae", "Caproidae", "Centriscidae", "Centrolophidae", "Dasyatidae", "Clupeidae",
"Blenniidae", "Mullidae", "Priacanthidae", "Sphyraenidae", "Apogonidae", "Tetraodontidae",
"Pomacentridae", "Lutjanidae", "Labridae", "Syngnathidae", "Sparidae", "Kyphosidae", "Rachycentridae",
"Belonidae", "Acanthuridae", "Caesionidae", "Aulostomidae", "Platax", "Engraulidae", "Chanidae",
"Nematistiidae", "Lobotidae", "Macroramphosidae", "Ephippidae", "Rhincodontidae")
# fl
fl <- select_fish_families_pelagic(fl, fish_families)
# maxn
maxn <- select_fish_families_pelagic(maxn, fish_families)
### keep only opcodes that are available in meta in fl and maxn
# fl
fl <- keep_opcode_in_meta(meta, fl)
# maxn
maxn <- keep_opcode_in_meta(meta, maxn)
### remove from fl the opcodes not available in maxn, ie the single opcodes
#fl
fl <- remove_single_opcodes(fl, maxn)
#number of opcodes
length(unique(fl$NewOpCode))
length(unique(maxn$NewOpCode))
#number of strings
length(unique(fl$String))
length(unique(maxn$String))
### assign empty opcodes in meta
meta <- assign_empty_opcodes_meta_pelagic(meta, maxn)
### write meta opcodes for pelagic bruvs
write_meta_opcodes_pelagic(meta)
### write meta strings for pelagic bruvs
write_meta_strings_pelagic(meta)
### Add mean fork length data to maxn data based on a hierarchy for pelagic bruvs
maxn <- add_mean_fl_to_maxn_data_pelagic(fl, maxn)
### Add fork length data for individuals counted in maxn but with no available fork length
### for these individuals we assign the mean fork length calculated in maxn data
### for pelagic bruvs
fl <- add_individual_fl_data_pelagic(fl, maxn)
### Estimate weight from observed length for a taxa using rfishbase
fl <- estimate_weight_from_length(fl)
### rename objects before saving
maxn_pelagic = maxn
fl_pelagic = fl
meta_pelagic = meta
