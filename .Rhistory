maxn <- read_maxn_pelagic()
fl <- read_fl_pelagic()
### clean data
# clean maxn
maxn <- clean_maxn_pelagic(maxn)
# clean fl
fl <- clean_fl_pelagic(fl)
# clean meta
meta <- clean_meta_pelagic(meta)
### select fish families
fish_families <- c("Nomeidae", "Istiophoridae", "Fistulariidae", "Coryphaenidae", "Scombridae", "Carangidae", "Myliobatidae",
"Echeneidae", "Gerreidae", "Carcharhinidae", "Sphyrnidae", "Exocoetidae", "Monacanthidae", "Lamnidae",
"Balistidae", "Molidae", "Caproidae", "Centriscidae", "Centrolophidae", "Dasyatidae", "Clupeidae",
"Blenniidae", "Mullidae", "Priacanthidae", "Sphyraenidae", "Apogonidae", "Tetraodontidae",
"Pomacentridae", "Lutjanidae", "Labridae", "Syngnathidae", "Sparidae", "Kyphosidae", "Rachycentridae",
"Belonidae", "Acanthuridae", "Caesionidae", "Aulostomidae", "Platax", "Engraulidae", "Chanidae",
"Nematistiidae", "Lobotidae", "Macroramphosidae", "Ephippidae")
# fl
fl <- select_fish_families_pelagic(fl, fish_families)
# maxn
maxn <- select_fish_families_pelagic(maxn, fish_families)
### keep only opcodes that are available in meta in data (fl and maxn)
# fl
fl <- keep_opcode_in_meta_pelagic(meta, fl)
# maxn
maxn <- keep_opcode_in_meta_pelagic(meta, maxn)
### remove from a data (fl or maxn) the opcode not available in the other data (maxn or fl), ie the single opcodes
#fl
fl <- remove_single_opcodes_pelagic(fl, maxn)
#maxn
maxn <- remove_single_opcodes_pelagic(maxn, fl)
#checks
length(unique(fl$NewOpCode))
length(unique(maxn$NewOpCode))
### assign empty opcodes in meta
meta <- assign_empty_opcodes_meta_pelagic(meta, maxn)
### Add mean fork length data to maxn data based on a hierarchy for pelagic bruvs
maxn <- add_mean_fl_to_maxn_data_pelagic(fl, maxn)
### Add fork length data for individuals counted in maxn but with no available fork length
### for these individuals we assign the mean fork length calculated in maxn data
### for pelagic bruvs
fl <- add_individual_fl_data_pelagic(fl, maxn)
#load all functions
devtools::load_all()
#to use pipe operator
library(magrittr)
########################################################################################################################################
########### pelagic bruvs
### read pelagic bruvs data
meta <- read_meta_pelagic()
maxn <- read_maxn_pelagic()
fl <- read_fl_pelagic()
### clean data
# clean maxn
maxn <- clean_maxn_pelagic(maxn)
# clean fl
fl <- clean_fl_pelagic(fl)
# clean meta
meta <- clean_meta_pelagic(meta)
### select fish families
fish_families <- c("Nomeidae", "Istiophoridae", "Fistulariidae", "Coryphaenidae", "Scombridae", "Carangidae", "Myliobatidae",
"Echeneidae", "Gerreidae", "Carcharhinidae", "Sphyrnidae", "Exocoetidae", "Monacanthidae", "Lamnidae",
"Balistidae", "Molidae", "Caproidae", "Centriscidae", "Centrolophidae", "Dasyatidae", "Clupeidae",
"Blenniidae", "Mullidae", "Priacanthidae", "Sphyraenidae", "Apogonidae", "Tetraodontidae",
"Pomacentridae", "Lutjanidae", "Labridae", "Syngnathidae", "Sparidae", "Kyphosidae", "Rachycentridae",
"Belonidae", "Acanthuridae", "Caesionidae", "Aulostomidae", "Platax", "Engraulidae", "Chanidae",
"Nematistiidae", "Lobotidae", "Macroramphosidae", "Ephippidae")
# fl
fl <- select_fish_families_pelagic(fl, fish_families)
# maxn
maxn <- select_fish_families_pelagic(maxn, fish_families)
### keep only opcodes that are available in meta in data (fl and maxn)
# fl
fl <- keep_opcode_in_meta_pelagic(meta, fl)
# maxn
maxn <- keep_opcode_in_meta_pelagic(meta, maxn)
### remove from a data (fl or maxn) the opcode not available in the other data (maxn or fl), ie the single opcodes
#fl
fl <- remove_single_opcodes_pelagic(fl, maxn)
#maxn
maxn <- remove_single_opcodes_pelagic(maxn, fl)
#checks
length(unique(fl$NewOpCode))
length(unique(maxn$NewOpCode))
### assign empty opcodes in meta
meta <- assign_empty_opcodes_meta_pelagic(meta, maxn)
### Add mean fork length data to maxn data based on a hierarchy for pelagic bruvs
maxn <- add_mean_fl_to_maxn_data_pelagic(fl, maxn)
### Add fork length data for individuals counted in maxn but with no available fork length
### for these individuals we assign the mean fork length calculated in maxn data
### for pelagic bruvs
fl <- add_individual_fl_data_pelagic(fl, maxn)
fl %>%
dplyr::group_by(NewOpCode, Binomial) %>%
dplyr::summarise(mean_fl_opcode = mean(Lengthcm)) -> mean_opcode
fl %>%
dplyr::group_by(String, Binomial) %>%
dplyr::summarise(mean_fl_string = mean(Lengthcm)) -> mean_string
fl %>%
dplyr::group_by(Exped, Binomial) %>%
dplyr::summarise(mean_fl_exped = mean(Lengthcm)) -> mean_exped
fl %>%
dplyr::group_by(Exped, Year, Binomial) %>%
dplyr::summarise(mean_fl_exped_year = mean(Lengthcm)) -> mean_exped_year
View(mean_exped)
View(mean_exped_year)
View(mean_opcode)
View(mean_string)
#load all functions
devtools::load_all()
#to use pipe operator
library(magrittr)
########################################################################################################################################
########### pelagic bruvs
### read pelagic bruvs data
meta <- read_meta_pelagic()
maxn <- read_maxn_pelagic()
fl <- read_fl_pelagic()
### clean data
#load all functions
devtools::load_all()
#to use pipe operator
library(magrittr)
########################################################################################################################################
########### pelagic bruvs
### read pelagic bruvs data
meta <- read_meta_pelagic()
maxn <- read_maxn_pelagic()
fl <- read_fl_pelagic()
### clean data
# clean maxn
maxn <- clean_maxn_pelagic(maxn)
# clean fl
fl <- clean_fl_pelagic(fl)
# clean meta
meta <- clean_meta_pelagic(meta)
### select fish families
fish_families <- c("Nomeidae", "Istiophoridae", "Fistulariidae", "Coryphaenidae", "Scombridae", "Carangidae", "Myliobatidae",
"Echeneidae", "Gerreidae", "Carcharhinidae", "Sphyrnidae", "Exocoetidae", "Monacanthidae", "Lamnidae",
"Balistidae", "Molidae", "Caproidae", "Centriscidae", "Centrolophidae", "Dasyatidae", "Clupeidae",
"Blenniidae", "Mullidae", "Priacanthidae", "Sphyraenidae", "Apogonidae", "Tetraodontidae",
"Pomacentridae", "Lutjanidae", "Labridae", "Syngnathidae", "Sparidae", "Kyphosidae", "Rachycentridae",
"Belonidae", "Acanthuridae", "Caesionidae", "Aulostomidae", "Platax", "Engraulidae", "Chanidae",
"Nematistiidae", "Lobotidae", "Macroramphosidae", "Ephippidae")
# fl
fl <- select_fish_families_pelagic(fl, fish_families)
# maxn
maxn <- select_fish_families_pelagic(maxn, fish_families)
### keep only opcodes that are available in meta in data (fl and maxn)
# fl
fl <- keep_opcode_in_meta_pelagic(meta, fl)
# maxn
maxn <- keep_opcode_in_meta_pelagic(meta, maxn)
### remove from a data (fl or maxn) the opcode not available in the other data (maxn or fl), ie the single opcodes
#fl
fl <- remove_single_opcodes_pelagic(fl, maxn)
#maxn
maxn <- remove_single_opcodes_pelagic(maxn, fl)
#checks
length(unique(fl$NewOpCode))
length(unique(maxn$NewOpCode))
### assign empty opcodes in meta
meta <- assign_empty_opcodes_meta_pelagic(meta, maxn)
### Add mean fork length data to maxn data based on a hierarchy for pelagic bruvs
maxn <- add_mean_fl_to_maxn_data_pelagic(fl, maxn)
#load all functions
devtools::load_all()
#to use pipe operator
library(magrittr)
########################################################################################################################################
########### pelagic bruvs
### read pelagic bruvs data
meta <- read_meta_pelagic()
maxn <- read_maxn_pelagic()
fl <- read_fl_pelagic()
### clean data
# clean maxn
maxn <- clean_maxn_pelagic(maxn)
# clean fl
fl <- clean_fl_pelagic(fl)
# clean meta
meta <- clean_meta_pelagic(meta)
### select fish families
fish_families <- c("Nomeidae", "Istiophoridae", "Fistulariidae", "Coryphaenidae", "Scombridae", "Carangidae", "Myliobatidae",
"Echeneidae", "Gerreidae", "Carcharhinidae", "Sphyrnidae", "Exocoetidae", "Monacanthidae", "Lamnidae",
"Balistidae", "Molidae", "Caproidae", "Centriscidae", "Centrolophidae", "Dasyatidae", "Clupeidae",
"Blenniidae", "Mullidae", "Priacanthidae", "Sphyraenidae", "Apogonidae", "Tetraodontidae",
"Pomacentridae", "Lutjanidae", "Labridae", "Syngnathidae", "Sparidae", "Kyphosidae", "Rachycentridae",
"Belonidae", "Acanthuridae", "Caesionidae", "Aulostomidae", "Platax", "Engraulidae", "Chanidae",
"Nematistiidae", "Lobotidae", "Macroramphosidae", "Ephippidae")
# fl
fl <- select_fish_families_pelagic(fl, fish_families)
# maxn
maxn <- select_fish_families_pelagic(maxn, fish_families)
#load all functions
devtools::load_all()
#to use pipe operator
library(magrittr)
########################################################################################################################################
########### pelagic bruvs
### read pelagic bruvs data
meta <- read_meta_pelagic()
maxn <- read_maxn_pelagic()
fl <- read_fl_pelagic()
### clean data
# clean maxn
maxn <- clean_maxn_pelagic(maxn)
# clean fl
fl <- clean_fl_pelagic(fl)
# clean meta
meta <- clean_meta_pelagic(meta)
### select fish families
fish_families <- c("Nomeidae", "Istiophoridae", "Fistulariidae", "Coryphaenidae", "Scombridae", "Carangidae", "Myliobatidae",
"Echeneidae", "Gerreidae", "Carcharhinidae", "Sphyrnidae", "Exocoetidae", "Monacanthidae", "Lamnidae",
"Balistidae", "Molidae", "Caproidae", "Centriscidae", "Centrolophidae", "Dasyatidae", "Clupeidae",
"Blenniidae", "Mullidae", "Priacanthidae", "Sphyraenidae", "Apogonidae", "Tetraodontidae",
"Pomacentridae", "Lutjanidae", "Labridae", "Syngnathidae", "Sparidae", "Kyphosidae", "Rachycentridae",
"Belonidae", "Acanthuridae", "Caesionidae", "Aulostomidae", "Platax", "Engraulidae", "Chanidae",
"Nematistiidae", "Lobotidae", "Macroramphosidae", "Ephippidae")
# fl
fl <- select_fish_families_pelagic(fl, fish_families)
# maxn
maxn <- select_fish_families_pelagic(maxn, fish_families)
### keep only opcodes that are available in meta in data (fl and maxn)
# fl
fl <- keep_opcode_in_meta_pelagic(meta, fl)
# maxn
maxn <- keep_opcode_in_meta_pelagic(meta, maxn)
### remove from a data (fl or maxn) the opcode not available in the other data (maxn or fl), ie the single opcodes
#fl
fl <- remove_single_opcodes_pelagic(fl, maxn)
#maxn
maxn <- remove_single_opcodes_pelagic(maxn, fl)
#checks
length(unique(fl$NewOpCode))
length(unique(maxn$NewOpCode))
### assign empty opcodes in meta
meta <- assign_empty_opcodes_meta_pelagic(meta, maxn)
### Add mean fork length data to maxn data based on a hierarchy for pelagic bruvs
maxn <- add_mean_fl_to_maxn_data_pelagic(fl, maxn)
#load all functions
devtools::load_all()
#to use pipe operator
library(magrittr)
########################################################################################################################################
########### pelagic bruvs
### read pelagic bruvs data
meta <- read_meta_pelagic()
maxn <- read_maxn_pelagic()
fl <- read_fl_pelagic()
### clean data
# clean maxn
maxn <- clean_maxn_pelagic(maxn)
# clean fl
fl <- clean_fl_pelagic(fl)
# clean meta
meta <- clean_meta_pelagic(meta)
### select fish families
fish_families <- c("Nomeidae", "Istiophoridae", "Fistulariidae", "Coryphaenidae", "Scombridae", "Carangidae", "Myliobatidae",
"Echeneidae", "Gerreidae", "Carcharhinidae", "Sphyrnidae", "Exocoetidae", "Monacanthidae", "Lamnidae",
"Balistidae", "Molidae", "Caproidae", "Centriscidae", "Centrolophidae", "Dasyatidae", "Clupeidae",
"Blenniidae", "Mullidae", "Priacanthidae", "Sphyraenidae", "Apogonidae", "Tetraodontidae",
"Pomacentridae", "Lutjanidae", "Labridae", "Syngnathidae", "Sparidae", "Kyphosidae", "Rachycentridae",
"Belonidae", "Acanthuridae", "Caesionidae", "Aulostomidae", "Platax", "Engraulidae", "Chanidae",
"Nematistiidae", "Lobotidae", "Macroramphosidae", "Ephippidae")
# fl
fl <- select_fish_families_pelagic(fl, fish_families)
# maxn
maxn <- select_fish_families_pelagic(maxn, fish_families)
#load all functions
devtools::load_all()
#to use pipe operator
library(magrittr)
########################################################################################################################################
########### pelagic bruvs
### read pelagic bruvs data
meta <- read_meta_pelagic()
maxn <- read_maxn_pelagic()
fl <- read_fl_pelagic()
### clean data
# clean maxn
maxn <- clean_maxn_pelagic(maxn)
# clean fl
fl <- clean_fl_pelagic(fl)
# clean meta
meta <- clean_meta_pelagic(meta)
### select fish families
fish_families <- c("Nomeidae", "Istiophoridae", "Fistulariidae", "Coryphaenidae", "Scombridae", "Carangidae", "Myliobatidae",
"Echeneidae", "Gerreidae", "Carcharhinidae", "Sphyrnidae", "Exocoetidae", "Monacanthidae", "Lamnidae",
"Balistidae", "Molidae", "Caproidae", "Centriscidae", "Centrolophidae", "Dasyatidae", "Clupeidae",
"Blenniidae", "Mullidae", "Priacanthidae", "Sphyraenidae", "Apogonidae", "Tetraodontidae",
"Pomacentridae", "Lutjanidae", "Labridae", "Syngnathidae", "Sparidae", "Kyphosidae", "Rachycentridae",
"Belonidae", "Acanthuridae", "Caesionidae", "Aulostomidae", "Platax", "Engraulidae", "Chanidae",
"Nematistiidae", "Lobotidae", "Macroramphosidae", "Ephippidae")
# fl
fl <- select_fish_families_pelagic(fl, fish_families)
# maxn
maxn <- select_fish_families_pelagic(maxn, fish_families)
### keep only opcodes that are available in meta in data (fl and maxn)
# fl
fl <- keep_opcode_in_meta_pelagic(meta, fl)
# maxn
maxn <- keep_opcode_in_meta_pelagic(meta, maxn)
### remove from a data (fl or maxn) the opcode not available in the other data (maxn or fl), ie the single opcodes
#fl
fl <- remove_single_opcodes_pelagic(fl, maxn)
#maxn
maxn <- remove_single_opcodes_pelagic(maxn, fl)
#checks
length(unique(fl$NewOpCode))
length(unique(maxn$NewOpCode))
### assign empty opcodes in meta
meta <- assign_empty_opcodes_meta_pelagic(meta, maxn)
### Add mean fork length data to maxn data based on a hierarchy for pelagic bruvs
maxn <- add_mean_fl_to_maxn_data_pelagic(fl, maxn)
mean_fl_all_exped
#load all functions
devtools::load_all()
#to use pipe operator
library(magrittr)
########################################################################################################################################
########### pelagic bruvs
### read pelagic bruvs data
meta <- read_meta_pelagic()
maxn <- read_maxn_pelagic()
fl <- read_fl_pelagic()
### clean data
# clean maxn
maxn <- clean_maxn_pelagic(maxn)
# clean fl
fl <- clean_fl_pelagic(fl)
# clean meta
meta <- clean_meta_pelagic(meta)
### select fish families
fish_families <- c("Nomeidae", "Istiophoridae", "Fistulariidae", "Coryphaenidae", "Scombridae", "Carangidae", "Myliobatidae",
"Echeneidae", "Gerreidae", "Carcharhinidae", "Sphyrnidae", "Exocoetidae", "Monacanthidae", "Lamnidae",
"Balistidae", "Molidae", "Caproidae", "Centriscidae", "Centrolophidae", "Dasyatidae", "Clupeidae",
"Blenniidae", "Mullidae", "Priacanthidae", "Sphyraenidae", "Apogonidae", "Tetraodontidae",
"Pomacentridae", "Lutjanidae", "Labridae", "Syngnathidae", "Sparidae", "Kyphosidae", "Rachycentridae",
"Belonidae", "Acanthuridae", "Caesionidae", "Aulostomidae", "Platax", "Engraulidae", "Chanidae",
"Nematistiidae", "Lobotidae", "Macroramphosidae", "Ephippidae")
# fl
fl <- select_fish_families_pelagic(fl, fish_families)
# maxn
maxn <- select_fish_families_pelagic(maxn, fish_families)
### keep only opcodes that are available in meta in data (fl and maxn)
# fl
fl <- keep_opcode_in_meta_pelagic(meta, fl)
# maxn
maxn <- keep_opcode_in_meta_pelagic(meta, maxn)
### remove from a data (fl or maxn) the opcode not available in the other data (maxn or fl), ie the single opcodes
#fl
fl <- remove_single_opcodes_pelagic(fl, maxn)
#maxn
maxn <- remove_single_opcodes_pelagic(maxn, fl)
#checks
length(unique(fl$NewOpCode))
length(unique(maxn$NewOpCode))
### assign empty opcodes in meta
meta <- assign_empty_opcodes_meta_pelagic(meta, maxn)
### Add mean fork length data to maxn data based on a hierarchy for pelagic bruvs
maxn <- add_mean_fl_to_maxn_data_pelagic(fl, maxn)
#load all functions
devtools::load_all()
#to use pipe operator
library(magrittr)
########################################################################################################################################
########### pelagic bruvs
### read pelagic bruvs data
meta <- read_meta_pelagic()
maxn <- read_maxn_pelagic()
fl <- read_fl_pelagic()
### clean data
# clean maxn
maxn <- clean_maxn_pelagic(maxn)
# clean fl
fl <- clean_fl_pelagic(fl)
# clean meta
meta <- clean_meta_pelagic(meta)
### select fish families
fish_families <- c("Nomeidae", "Istiophoridae", "Fistulariidae", "Coryphaenidae", "Scombridae", "Carangidae", "Myliobatidae",
"Echeneidae", "Gerreidae", "Carcharhinidae", "Sphyrnidae", "Exocoetidae", "Monacanthidae", "Lamnidae",
"Balistidae", "Molidae", "Caproidae", "Centriscidae", "Centrolophidae", "Dasyatidae", "Clupeidae",
"Blenniidae", "Mullidae", "Priacanthidae", "Sphyraenidae", "Apogonidae", "Tetraodontidae",
"Pomacentridae", "Lutjanidae", "Labridae", "Syngnathidae", "Sparidae", "Kyphosidae", "Rachycentridae",
"Belonidae", "Acanthuridae", "Caesionidae", "Aulostomidae", "Platax", "Engraulidae", "Chanidae",
"Nematistiidae", "Lobotidae", "Macroramphosidae", "Ephippidae")
# fl
fl <- select_fish_families_pelagic(fl, fish_families)
# maxn
maxn <- select_fish_families_pelagic(maxn, fish_families)
### keep only opcodes that are available in meta in data (fl and maxn)
# fl
fl <- keep_opcode_in_meta_pelagic(meta, fl)
# maxn
maxn <- keep_opcode_in_meta_pelagic(meta, maxn)
### remove from a data (fl or maxn) the opcode not available in the other data (maxn or fl), ie the single opcodes
#fl
fl <- remove_single_opcodes_pelagic(fl, maxn)
#maxn
maxn <- remove_single_opcodes_pelagic(maxn, fl)
#checks
length(unique(fl$NewOpCode))
length(unique(maxn$NewOpCode))
### assign empty opcodes in meta
meta <- assign_empty_opcodes_meta_pelagic(meta, maxn)
### Add mean fork length data to maxn data based on a hierarchy for pelagic bruvs
maxn <- add_mean_fl_to_maxn_data_pelagic(fl, maxn)
#load all functions
devtools::load_all()
#to use pipe operator
library(magrittr)
########################################################################################################################################
########### pelagic bruvs
### read pelagic bruvs data
meta <- read_meta_pelagic()
maxn <- read_maxn_pelagic()
fl <- read_fl_pelagic()
### clean data
# clean maxn
maxn <- clean_maxn_pelagic(maxn)
# clean fl
fl <- clean_fl_pelagic(fl)
# clean meta
meta <- clean_meta_pelagic(meta)
### select fish families
fish_families <- c("Nomeidae", "Istiophoridae", "Fistulariidae", "Coryphaenidae", "Scombridae", "Carangidae", "Myliobatidae",
"Echeneidae", "Gerreidae", "Carcharhinidae", "Sphyrnidae", "Exocoetidae", "Monacanthidae", "Lamnidae",
"Balistidae", "Molidae", "Caproidae", "Centriscidae", "Centrolophidae", "Dasyatidae", "Clupeidae",
"Blenniidae", "Mullidae", "Priacanthidae", "Sphyraenidae", "Apogonidae", "Tetraodontidae",
"Pomacentridae", "Lutjanidae", "Labridae", "Syngnathidae", "Sparidae", "Kyphosidae", "Rachycentridae",
"Belonidae", "Acanthuridae", "Caesionidae", "Aulostomidae", "Platax", "Engraulidae", "Chanidae",
"Nematistiidae", "Lobotidae", "Macroramphosidae", "Ephippidae")
# fl
fl <- select_fish_families_pelagic(fl, fish_families)
# maxn
maxn <- select_fish_families_pelagic(maxn, fish_families)
### keep only opcodes that are available in meta in data (fl and maxn)
# fl
fl <- keep_opcode_in_meta_pelagic(meta, fl)
# maxn
maxn <- keep_opcode_in_meta_pelagic(meta, maxn)
### remove from a data (fl or maxn) the opcode not available in the other data (maxn or fl), ie the single opcodes
#fl
fl <- remove_single_opcodes_pelagic(fl, maxn)
#maxn
maxn <- remove_single_opcodes_pelagic(maxn, fl)
#checks
length(unique(fl$NewOpCode))
length(unique(maxn$NewOpCode))
### assign empty opcodes in meta
meta <- assign_empty_opcodes_meta_pelagic(meta, maxn)
### Add mean fork length data to maxn data based on a hierarchy for pelagic bruvs
maxn <- add_mean_fl_to_maxn_data_pelagic(fl, maxn)
fl %>%
dplyr::mutate(mean_fl_assemblage = mean(Lengthcm)) -> mean_assemblage
mean_assemblage
mean_assemblage = mean(fl$Lengthcm)
mean_assemblage
#load all functions
devtools::load_all()
#to use pipe operator
library(magrittr)
########################################################################################################################################
########### pelagic bruvs
### read pelagic bruvs data
meta <- read_meta_pelagic()
maxn <- read_maxn_pelagic()
fl <- read_fl_pelagic()
### clean data
# clean maxn
maxn <- clean_maxn_pelagic(maxn)
# clean fl
fl <- clean_fl_pelagic(fl)
# clean meta
meta <- clean_meta_pelagic(meta)
### select fish families
fish_families <- c("Nomeidae", "Istiophoridae", "Fistulariidae", "Coryphaenidae", "Scombridae", "Carangidae", "Myliobatidae",
"Echeneidae", "Gerreidae", "Carcharhinidae", "Sphyrnidae", "Exocoetidae", "Monacanthidae", "Lamnidae",
"Balistidae", "Molidae", "Caproidae", "Centriscidae", "Centrolophidae", "Dasyatidae", "Clupeidae",
"Blenniidae", "Mullidae", "Priacanthidae", "Sphyraenidae", "Apogonidae", "Tetraodontidae",
"Pomacentridae", "Lutjanidae", "Labridae", "Syngnathidae", "Sparidae", "Kyphosidae", "Rachycentridae",
"Belonidae", "Acanthuridae", "Caesionidae", "Aulostomidae", "Platax", "Engraulidae", "Chanidae",
"Nematistiidae", "Lobotidae", "Macroramphosidae", "Ephippidae")
# fl
fl <- select_fish_families_pelagic(fl, fish_families)
# maxn
maxn <- select_fish_families_pelagic(maxn, fish_families)
### keep only opcodes that are available in meta in data (fl and maxn)
# fl
fl <- keep_opcode_in_meta_pelagic(meta, fl)
# maxn
maxn <- keep_opcode_in_meta_pelagic(meta, maxn)
### remove from a data (fl or maxn) the opcode not available in the other data (maxn or fl), ie the single opcodes
#fl
fl <- remove_single_opcodes_pelagic(fl, maxn)
#maxn
maxn <- remove_single_opcodes_pelagic(maxn, fl)
#checks
length(unique(fl$NewOpCode))
length(unique(maxn$NewOpCode))
### assign empty opcodes in meta
meta <- assign_empty_opcodes_meta_pelagic(meta, maxn)
### Add mean fork length data to maxn data based on a hierarchy for pelagic bruvs
maxn <- add_mean_fl_to_maxn_data_pelagic(fl, maxn)
fl <- add_individual_fl_data_pelagic(fl, maxn)
#read
expeds <- readxl::read_excel(here::here("data", "benthic", "All expeditions 2021_09_16 FIN.xlsx"), sheet = 1)
fl <- readxl::read_excel(here::here("data", "benthic", "BenthicFL.xlsx"), sheet = 1)
maxn <- readxl::read_excel(here::here("data", "benthic", "BenthicMaxN.xlsx"), sheet = 1)
meta <- readxl::read_excel(here::here("data", "benthic", "BenthicMeta.xlsx"), sheet = 1)
unique(maxn$Family)
